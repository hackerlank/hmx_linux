CC      = g++

CFLAGS = -c -g -O0 \
-D_REENTRANT -D_POSIX_PTHREAD_SEMANTICS -D_USE_FAST_MACRO
#-W -Wall warring -Wcast-qual -Wcast-align
#-Waggregate-return
###########################################################
#Check system:
#       Linux, SunOS, Solaris, BSD variants, AIX, HP-UX
SYSLIB = -lpthread
CHECKSYSRES = @echo "Unknow system type!";exit 1
UNIXNAME = $(shell uname -sm)

ifeq ($(CC),)
        CC = gcc
endif

# For FreeBSD
ifeq ($(findstring FreeBSD, $(UNIXNAME)), FreeBSD)
	ifeq ($(findstring gcc, $(CC)), gcc)
		CFLAGS += -Wstrict-prototypes
	endif
	CFLAGS += -DFREEBSD -D_REENTRANT -Wshadow
	SYSLIB = -lcrypt -lpthread
endif

#Path for Linux
ifeq ($(findstring Linux, $(UNIXNAME)), Linux)
	CFLAGS += -DLINUX2 -D_REENTRANT
endif

#Path for SunOS
ifeq ($(findstring SunOS, $(UNIXNAME)), SunOS)
	ifeq ($(findstring 86, $(UNIXNAME)), 86)
		SYSLIB += -lsocket -lnsl -lrt
	endif
	ifeq ($(findstring sun4u, $(UNIXNAME)), sun4u)
		SYSLIB += -lsocket -lnsl -lrt
	endif
	ifeq ($CC, "gcc")
		CFLAGS += -Wstrict-prototypes
	endif
	CFLAGS += -DSUNOS5 -D_REENTRANT
endif

#Path for HP-UX
ifeq ($(findstring HP-UX, $(UNIXNAME)), HP-UX)
	ifeq ($CC, "gcc")
		CFLAGS += -Wstrict-prototypes
	endif
	CFLAGS += -DHP_UX -DHPUX11 -Wshadow
	PLAT_NAME=hp-ux
endif

#Find system type.
ifneq ($(SYSPATH),)
	CHECKSYSRES = @echo "System is $(shell uname -sm)"
endif
###########################################################
#-----------------------------------------------------------
#CFLAGS += -I. -I引入头文件路径  -I引入头文件路径
#EXTLIBS = 其他libs路径
#LDFLAGS = -L库路径 -l载入的
#-----------------------------------------------------------
CFLAGS += -I. -I/usr/local/include/boost -I/usr/include/mysql -I/usr/include/libxml2 -I/usr/local/include/google/protobuf \
	-I../LibSrvcore -I../LibProtocol -I../LibNetMysql -I../LibNetSocket -I../Include
EXTLIBS = -lprotobuf -lmysqlclient -lcrypt -lssl -lxml2 \
	-lboost_system -lboost_thread -lboost_date_time -lboost_iostreams -lboost_program_options -lboost_regex -lboost_filesystem -lboost_chrono
LDFLAGS = -L/usr/local/lib -L/usr/lib  -L/usr/lib64 \
	$(EXTLIBS) $(SYSLIB)

COMPILE = $(CC) $(CFLAGS)
LINK = $(CC) $(OBJ) $(OBJPRO) $(LDFLAGS)
###########################################################
OBJ_PATH = .

#Project's objs

SRCPRO := $(wildcard ../LibProtocol/*.cc) $(UTIL)
OBJPRO := $(patsubst %.cc, $(OBJ_PATH)/%.o, $(notdir $(SRCPRO)))

$(OBJ_PATH)/%.pb.o: ../LibProtocol/%.pb.cc
	$(COMPILE) $< -o $@

###########################################################

SRC := $(wildcard *.cpp) $(wildcard ../Include/*.cpp) $(wildcard ../LibSrvcore/*.cpp) $(wildcard ../LibNetMysql/*.cpp) $(wildcard ../LibNetSocket/*.cpp) $(UTIL)
OBJ := $(patsubst %.cpp, $(OBJ_PATH)/%.o, $(notdir $(SRC)))


$(OBJ_PATH)/%.o: %.cpp
	$(COMPILE) $< -o $@
$(OBJ_PATH)/%.o: ../LibNetMysql/%.cpp	
	$(COMPILE) $< -o $@
$(OBJ_PATH)/%.o: ../LibNetSocket/%.cpp	
	$(COMPILE) $< -o $@
$(OBJ_PATH)/%.o: ../LibSrvcore/%.cpp	
	$(COMPILE) $< -o $@
$(OBJ_PATH)/%.o: ../Include/%.cpp
	$(COMPILE) $< -o $@


.PHONY = all clean
all: RM $(OBJPRO) $(OBJ)
	$(LINK) -o $(PROG)
	@echo ""
	@echo "All ok! Output:$(PROG)"
	@echo ""
RM:
	rm -f $(PROG)
clean:
	rm -f $(PROG)
	rm -f $(OBJPRO)
	rm -f $(OBJ)
###########################################################
