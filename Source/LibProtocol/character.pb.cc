// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: character.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "character.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace protobuf {

namespace {

const ::google::protobuf::Descriptor* Counter_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Counter_reflection_ = NULL;
const ::google::protobuf::Descriptor* CounterProto_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CounterProto_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgObject_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgObject_reflection_ = NULL;
const ::google::protobuf::Descriptor* RelChatMsg_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RelChatMsg_reflection_ = NULL;
const ::google::protobuf::Descriptor* RelChatProto_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RelChatProto_reflection_ = NULL;
const ::google::protobuf::Descriptor* Relation_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Relation_reflection_ = NULL;
const ::google::protobuf::Descriptor* RelationProto_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RelationProto_reflection_ = NULL;
const ::google::protobuf::Descriptor* UserBinary_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UserBinary_reflection_ = NULL;
const ::google::protobuf::Descriptor* WsUser_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  WsUser_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_character_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AssignDesc_character_2eproto() {
  protobuf_AddDesc_character_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "character.proto");
  GOOGLE_CHECK(file != NULL);
  Counter_descriptor_ = file->message_type(0);
  static const int Counter_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Counter, itemid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Counter, itemval_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Counter, starttime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Counter, endtime_),
  };
  Counter_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Counter_descriptor_,
      Counter::default_instance_,
      Counter_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Counter, _has_bits_[0]),
      -1,
      -1,
      sizeof(Counter),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Counter, _internal_metadata_),
      -1);
  CounterProto_descriptor_ = file->message_type(1);
  static const int CounterProto_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CounterProto, counter_),
  };
  CounterProto_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      CounterProto_descriptor_,
      CounterProto::default_instance_,
      CounterProto_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CounterProto, _has_bits_[0]),
      -1,
      -1,
      sizeof(CounterProto),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CounterProto, _internal_metadata_),
      -1);
  MsgObject_descriptor_ = file->message_type(2);
  static const int MsgObject_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgObject, conent_),
  };
  MsgObject_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      MsgObject_descriptor_,
      MsgObject::default_instance_,
      MsgObject_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgObject, _has_bits_[0]),
      -1,
      -1,
      sizeof(MsgObject),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgObject, _internal_metadata_),
      -1);
  RelChatMsg_descriptor_ = file->message_type(3);
  static const int RelChatMsg_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RelChatMsg, msgid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RelChatMsg, senduid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RelChatMsg, sendname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RelChatMsg, recvuid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RelChatMsg, recvname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RelChatMsg, sendtime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RelChatMsg, msgobj_),
  };
  RelChatMsg_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      RelChatMsg_descriptor_,
      RelChatMsg::default_instance_,
      RelChatMsg_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RelChatMsg, _has_bits_[0]),
      -1,
      -1,
      sizeof(RelChatMsg),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RelChatMsg, _internal_metadata_),
      -1);
  RelChatProto_descriptor_ = file->message_type(4);
  static const int RelChatProto_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RelChatProto, msglist_),
  };
  RelChatProto_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      RelChatProto_descriptor_,
      RelChatProto::default_instance_,
      RelChatProto_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RelChatProto, _has_bits_[0]),
      -1,
      -1,
      sizeof(RelChatProto),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RelChatProto, _internal_metadata_),
      -1);
  Relation_descriptor_ = file->message_type(5);
  static const int Relation_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Relation, uid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Relation, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Relation, rel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Relation, createtime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Relation, dealreltime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Relation, relchat_),
  };
  Relation_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Relation_descriptor_,
      Relation::default_instance_,
      Relation_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Relation, _has_bits_[0]),
      -1,
      -1,
      sizeof(Relation),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Relation, _internal_metadata_),
      -1);
  RelationProto_descriptor_ = file->message_type(6);
  static const int RelationProto_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RelationProto, relation_),
  };
  RelationProto_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      RelationProto_descriptor_,
      RelationProto::default_instance_,
      RelationProto_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RelationProto, _has_bits_[0]),
      -1,
      -1,
      sizeof(RelationProto),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RelationProto, _internal_metadata_),
      -1);
  UserBinary_descriptor_ = file->message_type(7);
  static const int UserBinary_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserBinary, counters_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserBinary, relations_),
  };
  UserBinary_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      UserBinary_descriptor_,
      UserBinary::default_instance_,
      UserBinary_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserBinary, _has_bits_[0]),
      -1,
      -1,
      sizeof(UserBinary),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserBinary, _internal_metadata_),
      -1);
  WsUser_descriptor_ = file->message_type(8);
  static const int WsUser_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WsUser, char_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WsUser, account_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WsUser, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WsUser, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WsUser, level_),
  };
  WsUser_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      WsUser_descriptor_,
      WsUser::default_instance_,
      WsUser_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WsUser, _has_bits_[0]),
      -1,
      -1,
      sizeof(WsUser),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WsUser, _internal_metadata_),
      -1);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_character_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Counter_descriptor_, &Counter::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      CounterProto_descriptor_, &CounterProto::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      MsgObject_descriptor_, &MsgObject::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      RelChatMsg_descriptor_, &RelChatMsg::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      RelChatProto_descriptor_, &RelChatProto::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Relation_descriptor_, &Relation::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      RelationProto_descriptor_, &RelationProto::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      UserBinary_descriptor_, &UserBinary::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      WsUser_descriptor_, &WsUser::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_character_2eproto() {
  delete Counter::default_instance_;
  delete Counter_reflection_;
  delete CounterProto::default_instance_;
  delete CounterProto_reflection_;
  delete MsgObject::default_instance_;
  delete MsgObject_reflection_;
  delete RelChatMsg::default_instance_;
  delete RelChatMsg_reflection_;
  delete RelChatProto::default_instance_;
  delete RelChatProto_reflection_;
  delete Relation::default_instance_;
  delete Relation_reflection_;
  delete RelationProto::default_instance_;
  delete RelationProto_reflection_;
  delete UserBinary::default_instance_;
  delete UserBinary_reflection_;
  delete WsUser::default_instance_;
  delete WsUser_reflection_;
}

void protobuf_AddDesc_character_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AddDesc_character_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\017character.proto\022\010protobuf\"N\n\007Counter\022\016"
    "\n\006itemid\030\001 \001(\005\022\017\n\007itemval\030\002 \001(\005\022\021\n\tstart"
    "time\030\003 \001(\005\022\017\n\007endtime\030\004 \001(\005\"2\n\014CounterPr"
    "oto\022\"\n\007counter\030\001 \003(\0132\021.protobuf.Counter\""
    "\033\n\tMsgObject\022\016\n\006conent\030\001 \001(\t\"\230\001\n\nRelChat"
    "Msg\022\r\n\005msgid\030\001 \001(\003\022\017\n\007senduid\030\002 \001(\003\022\020\n\010s"
    "endname\030\003 \001(\t\022\017\n\007recvuid\030\004 \001(\003\022\020\n\010recvna"
    "me\030\005 \001(\t\022\020\n\010sendtime\030\006 \001(\005\022#\n\006msgobj\030\007 \001"
    "(\0132\023.protobuf.MsgObject\"5\n\014RelChatProto\022"
    "%\n\007msglist\030\001 \003(\0132\024.protobuf.RelChatMsg\"\204"
    "\001\n\010Relation\022\013\n\003uid\030\001 \001(\003\022\014\n\004name\030\002 \001(\t\022\013"
    "\n\003rel\030\003 \001(\005\022\022\n\ncreatetime\030\004 \001(\005\022\023\n\013dealr"
    "eltime\030\005 \001(\005\022\'\n\007relchat\030\006 \001(\0132\026.protobuf"
    ".RelChatProto\"5\n\rRelationProto\022$\n\010relati"
    "on\030\001 \003(\0132\022.protobuf.Relation\"b\n\nUserBina"
    "ry\022(\n\010counters\030\001 \001(\0132\026.protobuf.CounterP"
    "roto\022*\n\trelations\030\003 \001(\0132\027.protobuf.Relat"
    "ionProto\"X\n\006WsUser\022\017\n\007char_id\030\001 \001(\003\022\022\n\na"
    "ccount_id\030\002 \001(\003\022\014\n\004name\030\003 \001(\t\022\014\n\004type\030\004 "
    "\001(\005\022\r\n\005level\030\005 \001(\005", 778);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "character.proto", &protobuf_RegisterTypes);
  Counter::default_instance_ = new Counter();
  CounterProto::default_instance_ = new CounterProto();
  MsgObject::default_instance_ = new MsgObject();
  RelChatMsg::default_instance_ = new RelChatMsg();
  RelChatProto::default_instance_ = new RelChatProto();
  Relation::default_instance_ = new Relation();
  RelationProto::default_instance_ = new RelationProto();
  UserBinary::default_instance_ = new UserBinary();
  WsUser::default_instance_ = new WsUser();
  Counter::default_instance_->InitAsDefaultInstance();
  CounterProto::default_instance_->InitAsDefaultInstance();
  MsgObject::default_instance_->InitAsDefaultInstance();
  RelChatMsg::default_instance_->InitAsDefaultInstance();
  RelChatProto::default_instance_->InitAsDefaultInstance();
  Relation::default_instance_->InitAsDefaultInstance();
  RelationProto::default_instance_->InitAsDefaultInstance();
  UserBinary::default_instance_->InitAsDefaultInstance();
  WsUser::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_character_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_character_2eproto {
  StaticDescriptorInitializer_character_2eproto() {
    protobuf_AddDesc_character_2eproto();
  }
} static_descriptor_initializer_character_2eproto_;

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Counter::kItemidFieldNumber;
const int Counter::kItemvalFieldNumber;
const int Counter::kStarttimeFieldNumber;
const int Counter::kEndtimeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Counter::Counter()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:protobuf.Counter)
}

void Counter::InitAsDefaultInstance() {
}

Counter::Counter(const Counter& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:protobuf.Counter)
}

void Counter::SharedCtor() {
  _cached_size_ = 0;
  itemid_ = 0;
  itemval_ = 0;
  starttime_ = 0;
  endtime_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Counter::~Counter() {
  // @@protoc_insertion_point(destructor:protobuf.Counter)
  SharedDtor();
}

void Counter::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Counter::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Counter::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Counter_descriptor_;
}

const Counter& Counter::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_character_2eproto();
  return *default_instance_;
}

Counter* Counter::default_instance_ = NULL;

Counter* Counter::New(::google::protobuf::Arena* arena) const {
  Counter* n = new Counter;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Counter::Clear() {
// @@protoc_insertion_point(message_clear_start:protobuf.Counter)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(Counter, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<Counter*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(itemid_, endtime_);

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool Counter::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:protobuf.Counter)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 itemid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &itemid_)));
          set_has_itemid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_itemval;
        break;
      }

      // optional int32 itemval = 2;
      case 2: {
        if (tag == 16) {
         parse_itemval:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &itemval_)));
          set_has_itemval();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_starttime;
        break;
      }

      // optional int32 starttime = 3;
      case 3: {
        if (tag == 24) {
         parse_starttime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &starttime_)));
          set_has_starttime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_endtime;
        break;
      }

      // optional int32 endtime = 4;
      case 4: {
        if (tag == 32) {
         parse_endtime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &endtime_)));
          set_has_endtime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:protobuf.Counter)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:protobuf.Counter)
  return false;
#undef DO_
}

void Counter::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:protobuf.Counter)
  // optional int32 itemid = 1;
  if (has_itemid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->itemid(), output);
  }

  // optional int32 itemval = 2;
  if (has_itemval()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->itemval(), output);
  }

  // optional int32 starttime = 3;
  if (has_starttime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->starttime(), output);
  }

  // optional int32 endtime = 4;
  if (has_endtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->endtime(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:protobuf.Counter)
}

::google::protobuf::uint8* Counter::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:protobuf.Counter)
  // optional int32 itemid = 1;
  if (has_itemid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->itemid(), target);
  }

  // optional int32 itemval = 2;
  if (has_itemval()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->itemval(), target);
  }

  // optional int32 starttime = 3;
  if (has_starttime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->starttime(), target);
  }

  // optional int32 endtime = 4;
  if (has_endtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->endtime(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protobuf.Counter)
  return target;
}

int Counter::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:protobuf.Counter)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 15u) {
    // optional int32 itemid = 1;
    if (has_itemid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->itemid());
    }

    // optional int32 itemval = 2;
    if (has_itemval()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->itemval());
    }

    // optional int32 starttime = 3;
    if (has_starttime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->starttime());
    }

    // optional int32 endtime = 4;
    if (has_endtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->endtime());
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Counter::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:protobuf.Counter)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const Counter* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Counter>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:protobuf.Counter)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:protobuf.Counter)
    MergeFrom(*source);
  }
}

void Counter::MergeFrom(const Counter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protobuf.Counter)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_itemid()) {
      set_itemid(from.itemid());
    }
    if (from.has_itemval()) {
      set_itemval(from.itemval());
    }
    if (from.has_starttime()) {
      set_starttime(from.starttime());
    }
    if (from.has_endtime()) {
      set_endtime(from.endtime());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void Counter::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:protobuf.Counter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Counter::CopyFrom(const Counter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protobuf.Counter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Counter::IsInitialized() const {

  return true;
}

void Counter::Swap(Counter* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Counter::InternalSwap(Counter* other) {
  std::swap(itemid_, other->itemid_);
  std::swap(itemval_, other->itemval_);
  std::swap(starttime_, other->starttime_);
  std::swap(endtime_, other->endtime_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Counter::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Counter_descriptor_;
  metadata.reflection = Counter_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Counter

// optional int32 itemid = 1;
bool Counter::has_itemid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Counter::set_has_itemid() {
  _has_bits_[0] |= 0x00000001u;
}
void Counter::clear_has_itemid() {
  _has_bits_[0] &= ~0x00000001u;
}
void Counter::clear_itemid() {
  itemid_ = 0;
  clear_has_itemid();
}
 ::google::protobuf::int32 Counter::itemid() const {
  // @@protoc_insertion_point(field_get:protobuf.Counter.itemid)
  return itemid_;
}
 void Counter::set_itemid(::google::protobuf::int32 value) {
  set_has_itemid();
  itemid_ = value;
  // @@protoc_insertion_point(field_set:protobuf.Counter.itemid)
}

// optional int32 itemval = 2;
bool Counter::has_itemval() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void Counter::set_has_itemval() {
  _has_bits_[0] |= 0x00000002u;
}
void Counter::clear_has_itemval() {
  _has_bits_[0] &= ~0x00000002u;
}
void Counter::clear_itemval() {
  itemval_ = 0;
  clear_has_itemval();
}
 ::google::protobuf::int32 Counter::itemval() const {
  // @@protoc_insertion_point(field_get:protobuf.Counter.itemval)
  return itemval_;
}
 void Counter::set_itemval(::google::protobuf::int32 value) {
  set_has_itemval();
  itemval_ = value;
  // @@protoc_insertion_point(field_set:protobuf.Counter.itemval)
}

// optional int32 starttime = 3;
bool Counter::has_starttime() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void Counter::set_has_starttime() {
  _has_bits_[0] |= 0x00000004u;
}
void Counter::clear_has_starttime() {
  _has_bits_[0] &= ~0x00000004u;
}
void Counter::clear_starttime() {
  starttime_ = 0;
  clear_has_starttime();
}
 ::google::protobuf::int32 Counter::starttime() const {
  // @@protoc_insertion_point(field_get:protobuf.Counter.starttime)
  return starttime_;
}
 void Counter::set_starttime(::google::protobuf::int32 value) {
  set_has_starttime();
  starttime_ = value;
  // @@protoc_insertion_point(field_set:protobuf.Counter.starttime)
}

// optional int32 endtime = 4;
bool Counter::has_endtime() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void Counter::set_has_endtime() {
  _has_bits_[0] |= 0x00000008u;
}
void Counter::clear_has_endtime() {
  _has_bits_[0] &= ~0x00000008u;
}
void Counter::clear_endtime() {
  endtime_ = 0;
  clear_has_endtime();
}
 ::google::protobuf::int32 Counter::endtime() const {
  // @@protoc_insertion_point(field_get:protobuf.Counter.endtime)
  return endtime_;
}
 void Counter::set_endtime(::google::protobuf::int32 value) {
  set_has_endtime();
  endtime_ = value;
  // @@protoc_insertion_point(field_set:protobuf.Counter.endtime)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CounterProto::kCounterFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CounterProto::CounterProto()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:protobuf.CounterProto)
}

void CounterProto::InitAsDefaultInstance() {
}

CounterProto::CounterProto(const CounterProto& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:protobuf.CounterProto)
}

void CounterProto::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CounterProto::~CounterProto() {
  // @@protoc_insertion_point(destructor:protobuf.CounterProto)
  SharedDtor();
}

void CounterProto::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CounterProto::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CounterProto::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CounterProto_descriptor_;
}

const CounterProto& CounterProto::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_character_2eproto();
  return *default_instance_;
}

CounterProto* CounterProto::default_instance_ = NULL;

CounterProto* CounterProto::New(::google::protobuf::Arena* arena) const {
  CounterProto* n = new CounterProto;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CounterProto::Clear() {
// @@protoc_insertion_point(message_clear_start:protobuf.CounterProto)
  counter_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool CounterProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:protobuf.CounterProto)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .protobuf.Counter counter = 1;
      case 1: {
        if (tag == 10) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_counter:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_counter()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_loop_counter;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:protobuf.CounterProto)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:protobuf.CounterProto)
  return false;
#undef DO_
}

void CounterProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:protobuf.CounterProto)
  // repeated .protobuf.Counter counter = 1;
  for (unsigned int i = 0, n = this->counter_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->counter(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:protobuf.CounterProto)
}

::google::protobuf::uint8* CounterProto::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:protobuf.CounterProto)
  // repeated .protobuf.Counter counter = 1;
  for (unsigned int i = 0, n = this->counter_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->counter(i), false, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protobuf.CounterProto)
  return target;
}

int CounterProto::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:protobuf.CounterProto)
  int total_size = 0;

  // repeated .protobuf.Counter counter = 1;
  total_size += 1 * this->counter_size();
  for (int i = 0; i < this->counter_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->counter(i));
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CounterProto::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:protobuf.CounterProto)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const CounterProto* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const CounterProto>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:protobuf.CounterProto)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:protobuf.CounterProto)
    MergeFrom(*source);
  }
}

void CounterProto::MergeFrom(const CounterProto& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protobuf.CounterProto)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  counter_.MergeFrom(from.counter_);
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void CounterProto::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:protobuf.CounterProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CounterProto::CopyFrom(const CounterProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protobuf.CounterProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CounterProto::IsInitialized() const {

  return true;
}

void CounterProto::Swap(CounterProto* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CounterProto::InternalSwap(CounterProto* other) {
  counter_.UnsafeArenaSwap(&other->counter_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CounterProto::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CounterProto_descriptor_;
  metadata.reflection = CounterProto_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CounterProto

// repeated .protobuf.Counter counter = 1;
int CounterProto::counter_size() const {
  return counter_.size();
}
void CounterProto::clear_counter() {
  counter_.Clear();
}
const ::protobuf::Counter& CounterProto::counter(int index) const {
  // @@protoc_insertion_point(field_get:protobuf.CounterProto.counter)
  return counter_.Get(index);
}
::protobuf::Counter* CounterProto::mutable_counter(int index) {
  // @@protoc_insertion_point(field_mutable:protobuf.CounterProto.counter)
  return counter_.Mutable(index);
}
::protobuf::Counter* CounterProto::add_counter() {
  // @@protoc_insertion_point(field_add:protobuf.CounterProto.counter)
  return counter_.Add();
}
::google::protobuf::RepeatedPtrField< ::protobuf::Counter >*
CounterProto::mutable_counter() {
  // @@protoc_insertion_point(field_mutable_list:protobuf.CounterProto.counter)
  return &counter_;
}
const ::google::protobuf::RepeatedPtrField< ::protobuf::Counter >&
CounterProto::counter() const {
  // @@protoc_insertion_point(field_list:protobuf.CounterProto.counter)
  return counter_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MsgObject::kConentFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MsgObject::MsgObject()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:protobuf.MsgObject)
}

void MsgObject::InitAsDefaultInstance() {
}

MsgObject::MsgObject(const MsgObject& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:protobuf.MsgObject)
}

void MsgObject::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  conent_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgObject::~MsgObject() {
  // @@protoc_insertion_point(destructor:protobuf.MsgObject)
  SharedDtor();
}

void MsgObject::SharedDtor() {
  conent_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void MsgObject::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgObject::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgObject_descriptor_;
}

const MsgObject& MsgObject::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_character_2eproto();
  return *default_instance_;
}

MsgObject* MsgObject::default_instance_ = NULL;

MsgObject* MsgObject::New(::google::protobuf::Arena* arena) const {
  MsgObject* n = new MsgObject;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void MsgObject::Clear() {
// @@protoc_insertion_point(message_clear_start:protobuf.MsgObject)
  if (has_conent()) {
    conent_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool MsgObject::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:protobuf.MsgObject)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string conent = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_conent()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->conent().data(), this->conent().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "protobuf.MsgObject.conent");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:protobuf.MsgObject)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:protobuf.MsgObject)
  return false;
#undef DO_
}

void MsgObject::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:protobuf.MsgObject)
  // optional string conent = 1;
  if (has_conent()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->conent().data(), this->conent().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "protobuf.MsgObject.conent");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->conent(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:protobuf.MsgObject)
}

::google::protobuf::uint8* MsgObject::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:protobuf.MsgObject)
  // optional string conent = 1;
  if (has_conent()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->conent().data(), this->conent().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "protobuf.MsgObject.conent");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->conent(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protobuf.MsgObject)
  return target;
}

int MsgObject::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:protobuf.MsgObject)
  int total_size = 0;

  // optional string conent = 1;
  if (has_conent()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->conent());
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgObject::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:protobuf.MsgObject)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const MsgObject* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const MsgObject>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:protobuf.MsgObject)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:protobuf.MsgObject)
    MergeFrom(*source);
  }
}

void MsgObject::MergeFrom(const MsgObject& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protobuf.MsgObject)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_conent()) {
      set_has_conent();
      conent_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.conent_);
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void MsgObject::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:protobuf.MsgObject)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgObject::CopyFrom(const MsgObject& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protobuf.MsgObject)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgObject::IsInitialized() const {

  return true;
}

void MsgObject::Swap(MsgObject* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MsgObject::InternalSwap(MsgObject* other) {
  conent_.Swap(&other->conent_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata MsgObject::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgObject_descriptor_;
  metadata.reflection = MsgObject_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// MsgObject

// optional string conent = 1;
bool MsgObject::has_conent() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void MsgObject::set_has_conent() {
  _has_bits_[0] |= 0x00000001u;
}
void MsgObject::clear_has_conent() {
  _has_bits_[0] &= ~0x00000001u;
}
void MsgObject::clear_conent() {
  conent_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_conent();
}
 const ::std::string& MsgObject::conent() const {
  // @@protoc_insertion_point(field_get:protobuf.MsgObject.conent)
  return conent_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void MsgObject::set_conent(const ::std::string& value) {
  set_has_conent();
  conent_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:protobuf.MsgObject.conent)
}
 void MsgObject::set_conent(const char* value) {
  set_has_conent();
  conent_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:protobuf.MsgObject.conent)
}
 void MsgObject::set_conent(const char* value, size_t size) {
  set_has_conent();
  conent_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:protobuf.MsgObject.conent)
}
 ::std::string* MsgObject::mutable_conent() {
  set_has_conent();
  // @@protoc_insertion_point(field_mutable:protobuf.MsgObject.conent)
  return conent_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* MsgObject::release_conent() {
  // @@protoc_insertion_point(field_release:protobuf.MsgObject.conent)
  clear_has_conent();
  return conent_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void MsgObject::set_allocated_conent(::std::string* conent) {
  if (conent != NULL) {
    set_has_conent();
  } else {
    clear_has_conent();
  }
  conent_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), conent);
  // @@protoc_insertion_point(field_set_allocated:protobuf.MsgObject.conent)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RelChatMsg::kMsgidFieldNumber;
const int RelChatMsg::kSenduidFieldNumber;
const int RelChatMsg::kSendnameFieldNumber;
const int RelChatMsg::kRecvuidFieldNumber;
const int RelChatMsg::kRecvnameFieldNumber;
const int RelChatMsg::kSendtimeFieldNumber;
const int RelChatMsg::kMsgobjFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RelChatMsg::RelChatMsg()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:protobuf.RelChatMsg)
}

void RelChatMsg::InitAsDefaultInstance() {
  msgobj_ = const_cast< ::protobuf::MsgObject*>(&::protobuf::MsgObject::default_instance());
}

RelChatMsg::RelChatMsg(const RelChatMsg& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:protobuf.RelChatMsg)
}

void RelChatMsg::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  msgid_ = GOOGLE_LONGLONG(0);
  senduid_ = GOOGLE_LONGLONG(0);
  sendname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  recvuid_ = GOOGLE_LONGLONG(0);
  recvname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  sendtime_ = 0;
  msgobj_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RelChatMsg::~RelChatMsg() {
  // @@protoc_insertion_point(destructor:protobuf.RelChatMsg)
  SharedDtor();
}

void RelChatMsg::SharedDtor() {
  sendname_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  recvname_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
    delete msgobj_;
  }
}

void RelChatMsg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RelChatMsg::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RelChatMsg_descriptor_;
}

const RelChatMsg& RelChatMsg::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_character_2eproto();
  return *default_instance_;
}

RelChatMsg* RelChatMsg::default_instance_ = NULL;

RelChatMsg* RelChatMsg::New(::google::protobuf::Arena* arena) const {
  RelChatMsg* n = new RelChatMsg;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void RelChatMsg::Clear() {
// @@protoc_insertion_point(message_clear_start:protobuf.RelChatMsg)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(RelChatMsg, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<RelChatMsg*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 127u) {
    ZR_(msgid_, senduid_);
    if (has_sendname()) {
      sendname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    recvuid_ = GOOGLE_LONGLONG(0);
    if (has_recvname()) {
      recvname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    sendtime_ = 0;
    if (has_msgobj()) {
      if (msgobj_ != NULL) msgobj_->::protobuf::MsgObject::Clear();
    }
  }

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool RelChatMsg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:protobuf.RelChatMsg)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 msgid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &msgid_)));
          set_has_msgid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_senduid;
        break;
      }

      // optional int64 senduid = 2;
      case 2: {
        if (tag == 16) {
         parse_senduid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &senduid_)));
          set_has_senduid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_sendname;
        break;
      }

      // optional string sendname = 3;
      case 3: {
        if (tag == 26) {
         parse_sendname:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_sendname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->sendname().data(), this->sendname().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "protobuf.RelChatMsg.sendname");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_recvuid;
        break;
      }

      // optional int64 recvuid = 4;
      case 4: {
        if (tag == 32) {
         parse_recvuid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &recvuid_)));
          set_has_recvuid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_recvname;
        break;
      }

      // optional string recvname = 5;
      case 5: {
        if (tag == 42) {
         parse_recvname:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_recvname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->recvname().data(), this->recvname().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "protobuf.RelChatMsg.recvname");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_sendtime;
        break;
      }

      // optional int32 sendtime = 6;
      case 6: {
        if (tag == 48) {
         parse_sendtime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sendtime_)));
          set_has_sendtime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_msgobj;
        break;
      }

      // optional .protobuf.MsgObject msgobj = 7;
      case 7: {
        if (tag == 58) {
         parse_msgobj:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_msgobj()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:protobuf.RelChatMsg)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:protobuf.RelChatMsg)
  return false;
#undef DO_
}

void RelChatMsg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:protobuf.RelChatMsg)
  // optional int64 msgid = 1;
  if (has_msgid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->msgid(), output);
  }

  // optional int64 senduid = 2;
  if (has_senduid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->senduid(), output);
  }

  // optional string sendname = 3;
  if (has_sendname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->sendname().data(), this->sendname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "protobuf.RelChatMsg.sendname");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->sendname(), output);
  }

  // optional int64 recvuid = 4;
  if (has_recvuid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->recvuid(), output);
  }

  // optional string recvname = 5;
  if (has_recvname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->recvname().data(), this->recvname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "protobuf.RelChatMsg.recvname");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->recvname(), output);
  }

  // optional int32 sendtime = 6;
  if (has_sendtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->sendtime(), output);
  }

  // optional .protobuf.MsgObject msgobj = 7;
  if (has_msgobj()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, *this->msgobj_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:protobuf.RelChatMsg)
}

::google::protobuf::uint8* RelChatMsg::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:protobuf.RelChatMsg)
  // optional int64 msgid = 1;
  if (has_msgid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->msgid(), target);
  }

  // optional int64 senduid = 2;
  if (has_senduid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->senduid(), target);
  }

  // optional string sendname = 3;
  if (has_sendname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->sendname().data(), this->sendname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "protobuf.RelChatMsg.sendname");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->sendname(), target);
  }

  // optional int64 recvuid = 4;
  if (has_recvuid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->recvuid(), target);
  }

  // optional string recvname = 5;
  if (has_recvname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->recvname().data(), this->recvname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "protobuf.RelChatMsg.recvname");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->recvname(), target);
  }

  // optional int32 sendtime = 6;
  if (has_sendtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->sendtime(), target);
  }

  // optional .protobuf.MsgObject msgobj = 7;
  if (has_msgobj()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        7, *this->msgobj_, false, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protobuf.RelChatMsg)
  return target;
}

int RelChatMsg::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:protobuf.RelChatMsg)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 127u) {
    // optional int64 msgid = 1;
    if (has_msgid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->msgid());
    }

    // optional int64 senduid = 2;
    if (has_senduid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->senduid());
    }

    // optional string sendname = 3;
    if (has_sendname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->sendname());
    }

    // optional int64 recvuid = 4;
    if (has_recvuid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->recvuid());
    }

    // optional string recvname = 5;
    if (has_recvname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->recvname());
    }

    // optional int32 sendtime = 6;
    if (has_sendtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->sendtime());
    }

    // optional .protobuf.MsgObject msgobj = 7;
    if (has_msgobj()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->msgobj_);
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RelChatMsg::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:protobuf.RelChatMsg)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const RelChatMsg* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const RelChatMsg>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:protobuf.RelChatMsg)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:protobuf.RelChatMsg)
    MergeFrom(*source);
  }
}

void RelChatMsg::MergeFrom(const RelChatMsg& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protobuf.RelChatMsg)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgid()) {
      set_msgid(from.msgid());
    }
    if (from.has_senduid()) {
      set_senduid(from.senduid());
    }
    if (from.has_sendname()) {
      set_has_sendname();
      sendname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.sendname_);
    }
    if (from.has_recvuid()) {
      set_recvuid(from.recvuid());
    }
    if (from.has_recvname()) {
      set_has_recvname();
      recvname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.recvname_);
    }
    if (from.has_sendtime()) {
      set_sendtime(from.sendtime());
    }
    if (from.has_msgobj()) {
      mutable_msgobj()->::protobuf::MsgObject::MergeFrom(from.msgobj());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void RelChatMsg::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:protobuf.RelChatMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RelChatMsg::CopyFrom(const RelChatMsg& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protobuf.RelChatMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RelChatMsg::IsInitialized() const {

  return true;
}

void RelChatMsg::Swap(RelChatMsg* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RelChatMsg::InternalSwap(RelChatMsg* other) {
  std::swap(msgid_, other->msgid_);
  std::swap(senduid_, other->senduid_);
  sendname_.Swap(&other->sendname_);
  std::swap(recvuid_, other->recvuid_);
  recvname_.Swap(&other->recvname_);
  std::swap(sendtime_, other->sendtime_);
  std::swap(msgobj_, other->msgobj_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata RelChatMsg::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RelChatMsg_descriptor_;
  metadata.reflection = RelChatMsg_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// RelChatMsg

// optional int64 msgid = 1;
bool RelChatMsg::has_msgid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void RelChatMsg::set_has_msgid() {
  _has_bits_[0] |= 0x00000001u;
}
void RelChatMsg::clear_has_msgid() {
  _has_bits_[0] &= ~0x00000001u;
}
void RelChatMsg::clear_msgid() {
  msgid_ = GOOGLE_LONGLONG(0);
  clear_has_msgid();
}
 ::google::protobuf::int64 RelChatMsg::msgid() const {
  // @@protoc_insertion_point(field_get:protobuf.RelChatMsg.msgid)
  return msgid_;
}
 void RelChatMsg::set_msgid(::google::protobuf::int64 value) {
  set_has_msgid();
  msgid_ = value;
  // @@protoc_insertion_point(field_set:protobuf.RelChatMsg.msgid)
}

// optional int64 senduid = 2;
bool RelChatMsg::has_senduid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void RelChatMsg::set_has_senduid() {
  _has_bits_[0] |= 0x00000002u;
}
void RelChatMsg::clear_has_senduid() {
  _has_bits_[0] &= ~0x00000002u;
}
void RelChatMsg::clear_senduid() {
  senduid_ = GOOGLE_LONGLONG(0);
  clear_has_senduid();
}
 ::google::protobuf::int64 RelChatMsg::senduid() const {
  // @@protoc_insertion_point(field_get:protobuf.RelChatMsg.senduid)
  return senduid_;
}
 void RelChatMsg::set_senduid(::google::protobuf::int64 value) {
  set_has_senduid();
  senduid_ = value;
  // @@protoc_insertion_point(field_set:protobuf.RelChatMsg.senduid)
}

// optional string sendname = 3;
bool RelChatMsg::has_sendname() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void RelChatMsg::set_has_sendname() {
  _has_bits_[0] |= 0x00000004u;
}
void RelChatMsg::clear_has_sendname() {
  _has_bits_[0] &= ~0x00000004u;
}
void RelChatMsg::clear_sendname() {
  sendname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_sendname();
}
 const ::std::string& RelChatMsg::sendname() const {
  // @@protoc_insertion_point(field_get:protobuf.RelChatMsg.sendname)
  return sendname_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void RelChatMsg::set_sendname(const ::std::string& value) {
  set_has_sendname();
  sendname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:protobuf.RelChatMsg.sendname)
}
 void RelChatMsg::set_sendname(const char* value) {
  set_has_sendname();
  sendname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:protobuf.RelChatMsg.sendname)
}
 void RelChatMsg::set_sendname(const char* value, size_t size) {
  set_has_sendname();
  sendname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:protobuf.RelChatMsg.sendname)
}
 ::std::string* RelChatMsg::mutable_sendname() {
  set_has_sendname();
  // @@protoc_insertion_point(field_mutable:protobuf.RelChatMsg.sendname)
  return sendname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* RelChatMsg::release_sendname() {
  // @@protoc_insertion_point(field_release:protobuf.RelChatMsg.sendname)
  clear_has_sendname();
  return sendname_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void RelChatMsg::set_allocated_sendname(::std::string* sendname) {
  if (sendname != NULL) {
    set_has_sendname();
  } else {
    clear_has_sendname();
  }
  sendname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), sendname);
  // @@protoc_insertion_point(field_set_allocated:protobuf.RelChatMsg.sendname)
}

// optional int64 recvuid = 4;
bool RelChatMsg::has_recvuid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void RelChatMsg::set_has_recvuid() {
  _has_bits_[0] |= 0x00000008u;
}
void RelChatMsg::clear_has_recvuid() {
  _has_bits_[0] &= ~0x00000008u;
}
void RelChatMsg::clear_recvuid() {
  recvuid_ = GOOGLE_LONGLONG(0);
  clear_has_recvuid();
}
 ::google::protobuf::int64 RelChatMsg::recvuid() const {
  // @@protoc_insertion_point(field_get:protobuf.RelChatMsg.recvuid)
  return recvuid_;
}
 void RelChatMsg::set_recvuid(::google::protobuf::int64 value) {
  set_has_recvuid();
  recvuid_ = value;
  // @@protoc_insertion_point(field_set:protobuf.RelChatMsg.recvuid)
}

// optional string recvname = 5;
bool RelChatMsg::has_recvname() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void RelChatMsg::set_has_recvname() {
  _has_bits_[0] |= 0x00000010u;
}
void RelChatMsg::clear_has_recvname() {
  _has_bits_[0] &= ~0x00000010u;
}
void RelChatMsg::clear_recvname() {
  recvname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_recvname();
}
 const ::std::string& RelChatMsg::recvname() const {
  // @@protoc_insertion_point(field_get:protobuf.RelChatMsg.recvname)
  return recvname_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void RelChatMsg::set_recvname(const ::std::string& value) {
  set_has_recvname();
  recvname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:protobuf.RelChatMsg.recvname)
}
 void RelChatMsg::set_recvname(const char* value) {
  set_has_recvname();
  recvname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:protobuf.RelChatMsg.recvname)
}
 void RelChatMsg::set_recvname(const char* value, size_t size) {
  set_has_recvname();
  recvname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:protobuf.RelChatMsg.recvname)
}
 ::std::string* RelChatMsg::mutable_recvname() {
  set_has_recvname();
  // @@protoc_insertion_point(field_mutable:protobuf.RelChatMsg.recvname)
  return recvname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* RelChatMsg::release_recvname() {
  // @@protoc_insertion_point(field_release:protobuf.RelChatMsg.recvname)
  clear_has_recvname();
  return recvname_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void RelChatMsg::set_allocated_recvname(::std::string* recvname) {
  if (recvname != NULL) {
    set_has_recvname();
  } else {
    clear_has_recvname();
  }
  recvname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), recvname);
  // @@protoc_insertion_point(field_set_allocated:protobuf.RelChatMsg.recvname)
}

// optional int32 sendtime = 6;
bool RelChatMsg::has_sendtime() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void RelChatMsg::set_has_sendtime() {
  _has_bits_[0] |= 0x00000020u;
}
void RelChatMsg::clear_has_sendtime() {
  _has_bits_[0] &= ~0x00000020u;
}
void RelChatMsg::clear_sendtime() {
  sendtime_ = 0;
  clear_has_sendtime();
}
 ::google::protobuf::int32 RelChatMsg::sendtime() const {
  // @@protoc_insertion_point(field_get:protobuf.RelChatMsg.sendtime)
  return sendtime_;
}
 void RelChatMsg::set_sendtime(::google::protobuf::int32 value) {
  set_has_sendtime();
  sendtime_ = value;
  // @@protoc_insertion_point(field_set:protobuf.RelChatMsg.sendtime)
}

// optional .protobuf.MsgObject msgobj = 7;
bool RelChatMsg::has_msgobj() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void RelChatMsg::set_has_msgobj() {
  _has_bits_[0] |= 0x00000040u;
}
void RelChatMsg::clear_has_msgobj() {
  _has_bits_[0] &= ~0x00000040u;
}
void RelChatMsg::clear_msgobj() {
  if (msgobj_ != NULL) msgobj_->::protobuf::MsgObject::Clear();
  clear_has_msgobj();
}
const ::protobuf::MsgObject& RelChatMsg::msgobj() const {
  // @@protoc_insertion_point(field_get:protobuf.RelChatMsg.msgobj)
  return msgobj_ != NULL ? *msgobj_ : *default_instance_->msgobj_;
}
::protobuf::MsgObject* RelChatMsg::mutable_msgobj() {
  set_has_msgobj();
  if (msgobj_ == NULL) {
    msgobj_ = new ::protobuf::MsgObject;
  }
  // @@protoc_insertion_point(field_mutable:protobuf.RelChatMsg.msgobj)
  return msgobj_;
}
::protobuf::MsgObject* RelChatMsg::release_msgobj() {
  // @@protoc_insertion_point(field_release:protobuf.RelChatMsg.msgobj)
  clear_has_msgobj();
  ::protobuf::MsgObject* temp = msgobj_;
  msgobj_ = NULL;
  return temp;
}
void RelChatMsg::set_allocated_msgobj(::protobuf::MsgObject* msgobj) {
  delete msgobj_;
  msgobj_ = msgobj;
  if (msgobj) {
    set_has_msgobj();
  } else {
    clear_has_msgobj();
  }
  // @@protoc_insertion_point(field_set_allocated:protobuf.RelChatMsg.msgobj)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RelChatProto::kMsglistFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RelChatProto::RelChatProto()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:protobuf.RelChatProto)
}

void RelChatProto::InitAsDefaultInstance() {
}

RelChatProto::RelChatProto(const RelChatProto& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:protobuf.RelChatProto)
}

void RelChatProto::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RelChatProto::~RelChatProto() {
  // @@protoc_insertion_point(destructor:protobuf.RelChatProto)
  SharedDtor();
}

void RelChatProto::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RelChatProto::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RelChatProto::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RelChatProto_descriptor_;
}

const RelChatProto& RelChatProto::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_character_2eproto();
  return *default_instance_;
}

RelChatProto* RelChatProto::default_instance_ = NULL;

RelChatProto* RelChatProto::New(::google::protobuf::Arena* arena) const {
  RelChatProto* n = new RelChatProto;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void RelChatProto::Clear() {
// @@protoc_insertion_point(message_clear_start:protobuf.RelChatProto)
  msglist_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool RelChatProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:protobuf.RelChatProto)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .protobuf.RelChatMsg msglist = 1;
      case 1: {
        if (tag == 10) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_msglist:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_msglist()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_loop_msglist;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:protobuf.RelChatProto)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:protobuf.RelChatProto)
  return false;
#undef DO_
}

void RelChatProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:protobuf.RelChatProto)
  // repeated .protobuf.RelChatMsg msglist = 1;
  for (unsigned int i = 0, n = this->msglist_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->msglist(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:protobuf.RelChatProto)
}

::google::protobuf::uint8* RelChatProto::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:protobuf.RelChatProto)
  // repeated .protobuf.RelChatMsg msglist = 1;
  for (unsigned int i = 0, n = this->msglist_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->msglist(i), false, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protobuf.RelChatProto)
  return target;
}

int RelChatProto::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:protobuf.RelChatProto)
  int total_size = 0;

  // repeated .protobuf.RelChatMsg msglist = 1;
  total_size += 1 * this->msglist_size();
  for (int i = 0; i < this->msglist_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->msglist(i));
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RelChatProto::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:protobuf.RelChatProto)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const RelChatProto* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const RelChatProto>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:protobuf.RelChatProto)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:protobuf.RelChatProto)
    MergeFrom(*source);
  }
}

void RelChatProto::MergeFrom(const RelChatProto& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protobuf.RelChatProto)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  msglist_.MergeFrom(from.msglist_);
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void RelChatProto::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:protobuf.RelChatProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RelChatProto::CopyFrom(const RelChatProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protobuf.RelChatProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RelChatProto::IsInitialized() const {

  return true;
}

void RelChatProto::Swap(RelChatProto* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RelChatProto::InternalSwap(RelChatProto* other) {
  msglist_.UnsafeArenaSwap(&other->msglist_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata RelChatProto::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RelChatProto_descriptor_;
  metadata.reflection = RelChatProto_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// RelChatProto

// repeated .protobuf.RelChatMsg msglist = 1;
int RelChatProto::msglist_size() const {
  return msglist_.size();
}
void RelChatProto::clear_msglist() {
  msglist_.Clear();
}
const ::protobuf::RelChatMsg& RelChatProto::msglist(int index) const {
  // @@protoc_insertion_point(field_get:protobuf.RelChatProto.msglist)
  return msglist_.Get(index);
}
::protobuf::RelChatMsg* RelChatProto::mutable_msglist(int index) {
  // @@protoc_insertion_point(field_mutable:protobuf.RelChatProto.msglist)
  return msglist_.Mutable(index);
}
::protobuf::RelChatMsg* RelChatProto::add_msglist() {
  // @@protoc_insertion_point(field_add:protobuf.RelChatProto.msglist)
  return msglist_.Add();
}
::google::protobuf::RepeatedPtrField< ::protobuf::RelChatMsg >*
RelChatProto::mutable_msglist() {
  // @@protoc_insertion_point(field_mutable_list:protobuf.RelChatProto.msglist)
  return &msglist_;
}
const ::google::protobuf::RepeatedPtrField< ::protobuf::RelChatMsg >&
RelChatProto::msglist() const {
  // @@protoc_insertion_point(field_list:protobuf.RelChatProto.msglist)
  return msglist_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Relation::kUidFieldNumber;
const int Relation::kNameFieldNumber;
const int Relation::kRelFieldNumber;
const int Relation::kCreatetimeFieldNumber;
const int Relation::kDealreltimeFieldNumber;
const int Relation::kRelchatFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Relation::Relation()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:protobuf.Relation)
}

void Relation::InitAsDefaultInstance() {
  relchat_ = const_cast< ::protobuf::RelChatProto*>(&::protobuf::RelChatProto::default_instance());
}

Relation::Relation(const Relation& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:protobuf.Relation)
}

void Relation::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  uid_ = GOOGLE_LONGLONG(0);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  rel_ = 0;
  createtime_ = 0;
  dealreltime_ = 0;
  relchat_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Relation::~Relation() {
  // @@protoc_insertion_point(destructor:protobuf.Relation)
  SharedDtor();
}

void Relation::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
    delete relchat_;
  }
}

void Relation::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Relation::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Relation_descriptor_;
}

const Relation& Relation::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_character_2eproto();
  return *default_instance_;
}

Relation* Relation::default_instance_ = NULL;

Relation* Relation::New(::google::protobuf::Arena* arena) const {
  Relation* n = new Relation;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Relation::Clear() {
// @@protoc_insertion_point(message_clear_start:protobuf.Relation)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(Relation, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<Relation*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 63u) {
    ZR_(rel_, createtime_);
    uid_ = GOOGLE_LONGLONG(0);
    if (has_name()) {
      name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    dealreltime_ = 0;
    if (has_relchat()) {
      if (relchat_ != NULL) relchat_->::protobuf::RelChatProto::Clear();
    }
  }

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool Relation::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:protobuf.Relation)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 uid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &uid_)));
          set_has_uid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_name;
        break;
      }

      // optional string name = 2;
      case 2: {
        if (tag == 18) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "protobuf.Relation.name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_rel;
        break;
      }

      // optional int32 rel = 3;
      case 3: {
        if (tag == 24) {
         parse_rel:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &rel_)));
          set_has_rel();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_createtime;
        break;
      }

      // optional int32 createtime = 4;
      case 4: {
        if (tag == 32) {
         parse_createtime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &createtime_)));
          set_has_createtime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_dealreltime;
        break;
      }

      // optional int32 dealreltime = 5;
      case 5: {
        if (tag == 40) {
         parse_dealreltime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &dealreltime_)));
          set_has_dealreltime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_relchat;
        break;
      }

      // optional .protobuf.RelChatProto relchat = 6;
      case 6: {
        if (tag == 50) {
         parse_relchat:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_relchat()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:protobuf.Relation)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:protobuf.Relation)
  return false;
#undef DO_
}

void Relation::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:protobuf.Relation)
  // optional int64 uid = 1;
  if (has_uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->uid(), output);
  }

  // optional string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "protobuf.Relation.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->name(), output);
  }

  // optional int32 rel = 3;
  if (has_rel()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->rel(), output);
  }

  // optional int32 createtime = 4;
  if (has_createtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->createtime(), output);
  }

  // optional int32 dealreltime = 5;
  if (has_dealreltime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->dealreltime(), output);
  }

  // optional .protobuf.RelChatProto relchat = 6;
  if (has_relchat()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, *this->relchat_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:protobuf.Relation)
}

::google::protobuf::uint8* Relation::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:protobuf.Relation)
  // optional int64 uid = 1;
  if (has_uid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->uid(), target);
  }

  // optional string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "protobuf.Relation.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }

  // optional int32 rel = 3;
  if (has_rel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->rel(), target);
  }

  // optional int32 createtime = 4;
  if (has_createtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->createtime(), target);
  }

  // optional int32 dealreltime = 5;
  if (has_dealreltime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->dealreltime(), target);
  }

  // optional .protobuf.RelChatProto relchat = 6;
  if (has_relchat()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        6, *this->relchat_, false, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protobuf.Relation)
  return target;
}

int Relation::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:protobuf.Relation)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 63u) {
    // optional int64 uid = 1;
    if (has_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->uid());
    }

    // optional string name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional int32 rel = 3;
    if (has_rel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->rel());
    }

    // optional int32 createtime = 4;
    if (has_createtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->createtime());
    }

    // optional int32 dealreltime = 5;
    if (has_dealreltime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->dealreltime());
    }

    // optional .protobuf.RelChatProto relchat = 6;
    if (has_relchat()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->relchat_);
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Relation::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:protobuf.Relation)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const Relation* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Relation>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:protobuf.Relation)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:protobuf.Relation)
    MergeFrom(*source);
  }
}

void Relation::MergeFrom(const Relation& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protobuf.Relation)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uid()) {
      set_uid(from.uid());
    }
    if (from.has_name()) {
      set_has_name();
      name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
    }
    if (from.has_rel()) {
      set_rel(from.rel());
    }
    if (from.has_createtime()) {
      set_createtime(from.createtime());
    }
    if (from.has_dealreltime()) {
      set_dealreltime(from.dealreltime());
    }
    if (from.has_relchat()) {
      mutable_relchat()->::protobuf::RelChatProto::MergeFrom(from.relchat());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void Relation::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:protobuf.Relation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Relation::CopyFrom(const Relation& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protobuf.Relation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Relation::IsInitialized() const {

  return true;
}

void Relation::Swap(Relation* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Relation::InternalSwap(Relation* other) {
  std::swap(uid_, other->uid_);
  name_.Swap(&other->name_);
  std::swap(rel_, other->rel_);
  std::swap(createtime_, other->createtime_);
  std::swap(dealreltime_, other->dealreltime_);
  std::swap(relchat_, other->relchat_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Relation::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Relation_descriptor_;
  metadata.reflection = Relation_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Relation

// optional int64 uid = 1;
bool Relation::has_uid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Relation::set_has_uid() {
  _has_bits_[0] |= 0x00000001u;
}
void Relation::clear_has_uid() {
  _has_bits_[0] &= ~0x00000001u;
}
void Relation::clear_uid() {
  uid_ = GOOGLE_LONGLONG(0);
  clear_has_uid();
}
 ::google::protobuf::int64 Relation::uid() const {
  // @@protoc_insertion_point(field_get:protobuf.Relation.uid)
  return uid_;
}
 void Relation::set_uid(::google::protobuf::int64 value) {
  set_has_uid();
  uid_ = value;
  // @@protoc_insertion_point(field_set:protobuf.Relation.uid)
}

// optional string name = 2;
bool Relation::has_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void Relation::set_has_name() {
  _has_bits_[0] |= 0x00000002u;
}
void Relation::clear_has_name() {
  _has_bits_[0] &= ~0x00000002u;
}
void Relation::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
 const ::std::string& Relation::name() const {
  // @@protoc_insertion_point(field_get:protobuf.Relation.name)
  return name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Relation::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:protobuf.Relation.name)
}
 void Relation::set_name(const char* value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:protobuf.Relation.name)
}
 void Relation::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:protobuf.Relation.name)
}
 ::std::string* Relation::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:protobuf.Relation.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Relation::release_name() {
  // @@protoc_insertion_point(field_release:protobuf.Relation.name)
  clear_has_name();
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Relation::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:protobuf.Relation.name)
}

// optional int32 rel = 3;
bool Relation::has_rel() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void Relation::set_has_rel() {
  _has_bits_[0] |= 0x00000004u;
}
void Relation::clear_has_rel() {
  _has_bits_[0] &= ~0x00000004u;
}
void Relation::clear_rel() {
  rel_ = 0;
  clear_has_rel();
}
 ::google::protobuf::int32 Relation::rel() const {
  // @@protoc_insertion_point(field_get:protobuf.Relation.rel)
  return rel_;
}
 void Relation::set_rel(::google::protobuf::int32 value) {
  set_has_rel();
  rel_ = value;
  // @@protoc_insertion_point(field_set:protobuf.Relation.rel)
}

// optional int32 createtime = 4;
bool Relation::has_createtime() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void Relation::set_has_createtime() {
  _has_bits_[0] |= 0x00000008u;
}
void Relation::clear_has_createtime() {
  _has_bits_[0] &= ~0x00000008u;
}
void Relation::clear_createtime() {
  createtime_ = 0;
  clear_has_createtime();
}
 ::google::protobuf::int32 Relation::createtime() const {
  // @@protoc_insertion_point(field_get:protobuf.Relation.createtime)
  return createtime_;
}
 void Relation::set_createtime(::google::protobuf::int32 value) {
  set_has_createtime();
  createtime_ = value;
  // @@protoc_insertion_point(field_set:protobuf.Relation.createtime)
}

// optional int32 dealreltime = 5;
bool Relation::has_dealreltime() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void Relation::set_has_dealreltime() {
  _has_bits_[0] |= 0x00000010u;
}
void Relation::clear_has_dealreltime() {
  _has_bits_[0] &= ~0x00000010u;
}
void Relation::clear_dealreltime() {
  dealreltime_ = 0;
  clear_has_dealreltime();
}
 ::google::protobuf::int32 Relation::dealreltime() const {
  // @@protoc_insertion_point(field_get:protobuf.Relation.dealreltime)
  return dealreltime_;
}
 void Relation::set_dealreltime(::google::protobuf::int32 value) {
  set_has_dealreltime();
  dealreltime_ = value;
  // @@protoc_insertion_point(field_set:protobuf.Relation.dealreltime)
}

// optional .protobuf.RelChatProto relchat = 6;
bool Relation::has_relchat() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void Relation::set_has_relchat() {
  _has_bits_[0] |= 0x00000020u;
}
void Relation::clear_has_relchat() {
  _has_bits_[0] &= ~0x00000020u;
}
void Relation::clear_relchat() {
  if (relchat_ != NULL) relchat_->::protobuf::RelChatProto::Clear();
  clear_has_relchat();
}
const ::protobuf::RelChatProto& Relation::relchat() const {
  // @@protoc_insertion_point(field_get:protobuf.Relation.relchat)
  return relchat_ != NULL ? *relchat_ : *default_instance_->relchat_;
}
::protobuf::RelChatProto* Relation::mutable_relchat() {
  set_has_relchat();
  if (relchat_ == NULL) {
    relchat_ = new ::protobuf::RelChatProto;
  }
  // @@protoc_insertion_point(field_mutable:protobuf.Relation.relchat)
  return relchat_;
}
::protobuf::RelChatProto* Relation::release_relchat() {
  // @@protoc_insertion_point(field_release:protobuf.Relation.relchat)
  clear_has_relchat();
  ::protobuf::RelChatProto* temp = relchat_;
  relchat_ = NULL;
  return temp;
}
void Relation::set_allocated_relchat(::protobuf::RelChatProto* relchat) {
  delete relchat_;
  relchat_ = relchat;
  if (relchat) {
    set_has_relchat();
  } else {
    clear_has_relchat();
  }
  // @@protoc_insertion_point(field_set_allocated:protobuf.Relation.relchat)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RelationProto::kRelationFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RelationProto::RelationProto()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:protobuf.RelationProto)
}

void RelationProto::InitAsDefaultInstance() {
}

RelationProto::RelationProto(const RelationProto& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:protobuf.RelationProto)
}

void RelationProto::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RelationProto::~RelationProto() {
  // @@protoc_insertion_point(destructor:protobuf.RelationProto)
  SharedDtor();
}

void RelationProto::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RelationProto::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RelationProto::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RelationProto_descriptor_;
}

const RelationProto& RelationProto::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_character_2eproto();
  return *default_instance_;
}

RelationProto* RelationProto::default_instance_ = NULL;

RelationProto* RelationProto::New(::google::protobuf::Arena* arena) const {
  RelationProto* n = new RelationProto;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void RelationProto::Clear() {
// @@protoc_insertion_point(message_clear_start:protobuf.RelationProto)
  relation_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool RelationProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:protobuf.RelationProto)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .protobuf.Relation relation = 1;
      case 1: {
        if (tag == 10) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_relation:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_relation()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_loop_relation;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:protobuf.RelationProto)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:protobuf.RelationProto)
  return false;
#undef DO_
}

void RelationProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:protobuf.RelationProto)
  // repeated .protobuf.Relation relation = 1;
  for (unsigned int i = 0, n = this->relation_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->relation(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:protobuf.RelationProto)
}

::google::protobuf::uint8* RelationProto::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:protobuf.RelationProto)
  // repeated .protobuf.Relation relation = 1;
  for (unsigned int i = 0, n = this->relation_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->relation(i), false, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protobuf.RelationProto)
  return target;
}

int RelationProto::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:protobuf.RelationProto)
  int total_size = 0;

  // repeated .protobuf.Relation relation = 1;
  total_size += 1 * this->relation_size();
  for (int i = 0; i < this->relation_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->relation(i));
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RelationProto::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:protobuf.RelationProto)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const RelationProto* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const RelationProto>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:protobuf.RelationProto)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:protobuf.RelationProto)
    MergeFrom(*source);
  }
}

void RelationProto::MergeFrom(const RelationProto& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protobuf.RelationProto)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  relation_.MergeFrom(from.relation_);
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void RelationProto::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:protobuf.RelationProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RelationProto::CopyFrom(const RelationProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protobuf.RelationProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RelationProto::IsInitialized() const {

  return true;
}

void RelationProto::Swap(RelationProto* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RelationProto::InternalSwap(RelationProto* other) {
  relation_.UnsafeArenaSwap(&other->relation_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata RelationProto::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RelationProto_descriptor_;
  metadata.reflection = RelationProto_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// RelationProto

// repeated .protobuf.Relation relation = 1;
int RelationProto::relation_size() const {
  return relation_.size();
}
void RelationProto::clear_relation() {
  relation_.Clear();
}
const ::protobuf::Relation& RelationProto::relation(int index) const {
  // @@protoc_insertion_point(field_get:protobuf.RelationProto.relation)
  return relation_.Get(index);
}
::protobuf::Relation* RelationProto::mutable_relation(int index) {
  // @@protoc_insertion_point(field_mutable:protobuf.RelationProto.relation)
  return relation_.Mutable(index);
}
::protobuf::Relation* RelationProto::add_relation() {
  // @@protoc_insertion_point(field_add:protobuf.RelationProto.relation)
  return relation_.Add();
}
::google::protobuf::RepeatedPtrField< ::protobuf::Relation >*
RelationProto::mutable_relation() {
  // @@protoc_insertion_point(field_mutable_list:protobuf.RelationProto.relation)
  return &relation_;
}
const ::google::protobuf::RepeatedPtrField< ::protobuf::Relation >&
RelationProto::relation() const {
  // @@protoc_insertion_point(field_list:protobuf.RelationProto.relation)
  return relation_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int UserBinary::kCountersFieldNumber;
const int UserBinary::kRelationsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

UserBinary::UserBinary()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:protobuf.UserBinary)
}

void UserBinary::InitAsDefaultInstance() {
  counters_ = const_cast< ::protobuf::CounterProto*>(&::protobuf::CounterProto::default_instance());
  relations_ = const_cast< ::protobuf::RelationProto*>(&::protobuf::RelationProto::default_instance());
}

UserBinary::UserBinary(const UserBinary& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:protobuf.UserBinary)
}

void UserBinary::SharedCtor() {
  _cached_size_ = 0;
  counters_ = NULL;
  relations_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UserBinary::~UserBinary() {
  // @@protoc_insertion_point(destructor:protobuf.UserBinary)
  SharedDtor();
}

void UserBinary::SharedDtor() {
  if (this != default_instance_) {
    delete counters_;
    delete relations_;
  }
}

void UserBinary::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UserBinary::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UserBinary_descriptor_;
}

const UserBinary& UserBinary::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_character_2eproto();
  return *default_instance_;
}

UserBinary* UserBinary::default_instance_ = NULL;

UserBinary* UserBinary::New(::google::protobuf::Arena* arena) const {
  UserBinary* n = new UserBinary;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void UserBinary::Clear() {
// @@protoc_insertion_point(message_clear_start:protobuf.UserBinary)
  if (_has_bits_[0 / 32] & 3u) {
    if (has_counters()) {
      if (counters_ != NULL) counters_->::protobuf::CounterProto::Clear();
    }
    if (has_relations()) {
      if (relations_ != NULL) relations_->::protobuf::RelationProto::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool UserBinary::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:protobuf.UserBinary)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .protobuf.CounterProto counters = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_counters()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_relations;
        break;
      }

      // optional .protobuf.RelationProto relations = 3;
      case 3: {
        if (tag == 26) {
         parse_relations:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_relations()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:protobuf.UserBinary)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:protobuf.UserBinary)
  return false;
#undef DO_
}

void UserBinary::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:protobuf.UserBinary)
  // optional .protobuf.CounterProto counters = 1;
  if (has_counters()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->counters_, output);
  }

  // optional .protobuf.RelationProto relations = 3;
  if (has_relations()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->relations_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:protobuf.UserBinary)
}

::google::protobuf::uint8* UserBinary::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:protobuf.UserBinary)
  // optional .protobuf.CounterProto counters = 1;
  if (has_counters()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->counters_, false, target);
  }

  // optional .protobuf.RelationProto relations = 3;
  if (has_relations()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->relations_, false, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protobuf.UserBinary)
  return target;
}

int UserBinary::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:protobuf.UserBinary)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 3u) {
    // optional .protobuf.CounterProto counters = 1;
    if (has_counters()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->counters_);
    }

    // optional .protobuf.RelationProto relations = 3;
    if (has_relations()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->relations_);
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UserBinary::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:protobuf.UserBinary)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const UserBinary* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const UserBinary>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:protobuf.UserBinary)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:protobuf.UserBinary)
    MergeFrom(*source);
  }
}

void UserBinary::MergeFrom(const UserBinary& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protobuf.UserBinary)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_counters()) {
      mutable_counters()->::protobuf::CounterProto::MergeFrom(from.counters());
    }
    if (from.has_relations()) {
      mutable_relations()->::protobuf::RelationProto::MergeFrom(from.relations());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void UserBinary::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:protobuf.UserBinary)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UserBinary::CopyFrom(const UserBinary& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protobuf.UserBinary)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserBinary::IsInitialized() const {

  return true;
}

void UserBinary::Swap(UserBinary* other) {
  if (other == this) return;
  InternalSwap(other);
}
void UserBinary::InternalSwap(UserBinary* other) {
  std::swap(counters_, other->counters_);
  std::swap(relations_, other->relations_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata UserBinary::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UserBinary_descriptor_;
  metadata.reflection = UserBinary_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// UserBinary

// optional .protobuf.CounterProto counters = 1;
bool UserBinary::has_counters() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void UserBinary::set_has_counters() {
  _has_bits_[0] |= 0x00000001u;
}
void UserBinary::clear_has_counters() {
  _has_bits_[0] &= ~0x00000001u;
}
void UserBinary::clear_counters() {
  if (counters_ != NULL) counters_->::protobuf::CounterProto::Clear();
  clear_has_counters();
}
const ::protobuf::CounterProto& UserBinary::counters() const {
  // @@protoc_insertion_point(field_get:protobuf.UserBinary.counters)
  return counters_ != NULL ? *counters_ : *default_instance_->counters_;
}
::protobuf::CounterProto* UserBinary::mutable_counters() {
  set_has_counters();
  if (counters_ == NULL) {
    counters_ = new ::protobuf::CounterProto;
  }
  // @@protoc_insertion_point(field_mutable:protobuf.UserBinary.counters)
  return counters_;
}
::protobuf::CounterProto* UserBinary::release_counters() {
  // @@protoc_insertion_point(field_release:protobuf.UserBinary.counters)
  clear_has_counters();
  ::protobuf::CounterProto* temp = counters_;
  counters_ = NULL;
  return temp;
}
void UserBinary::set_allocated_counters(::protobuf::CounterProto* counters) {
  delete counters_;
  counters_ = counters;
  if (counters) {
    set_has_counters();
  } else {
    clear_has_counters();
  }
  // @@protoc_insertion_point(field_set_allocated:protobuf.UserBinary.counters)
}

// optional .protobuf.RelationProto relations = 3;
bool UserBinary::has_relations() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void UserBinary::set_has_relations() {
  _has_bits_[0] |= 0x00000002u;
}
void UserBinary::clear_has_relations() {
  _has_bits_[0] &= ~0x00000002u;
}
void UserBinary::clear_relations() {
  if (relations_ != NULL) relations_->::protobuf::RelationProto::Clear();
  clear_has_relations();
}
const ::protobuf::RelationProto& UserBinary::relations() const {
  // @@protoc_insertion_point(field_get:protobuf.UserBinary.relations)
  return relations_ != NULL ? *relations_ : *default_instance_->relations_;
}
::protobuf::RelationProto* UserBinary::mutable_relations() {
  set_has_relations();
  if (relations_ == NULL) {
    relations_ = new ::protobuf::RelationProto;
  }
  // @@protoc_insertion_point(field_mutable:protobuf.UserBinary.relations)
  return relations_;
}
::protobuf::RelationProto* UserBinary::release_relations() {
  // @@protoc_insertion_point(field_release:protobuf.UserBinary.relations)
  clear_has_relations();
  ::protobuf::RelationProto* temp = relations_;
  relations_ = NULL;
  return temp;
}
void UserBinary::set_allocated_relations(::protobuf::RelationProto* relations) {
  delete relations_;
  relations_ = relations;
  if (relations) {
    set_has_relations();
  } else {
    clear_has_relations();
  }
  // @@protoc_insertion_point(field_set_allocated:protobuf.UserBinary.relations)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int WsUser::kCharIdFieldNumber;
const int WsUser::kAccountIdFieldNumber;
const int WsUser::kNameFieldNumber;
const int WsUser::kTypeFieldNumber;
const int WsUser::kLevelFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

WsUser::WsUser()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:protobuf.WsUser)
}

void WsUser::InitAsDefaultInstance() {
}

WsUser::WsUser(const WsUser& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:protobuf.WsUser)
}

void WsUser::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  char_id_ = GOOGLE_LONGLONG(0);
  account_id_ = GOOGLE_LONGLONG(0);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  type_ = 0;
  level_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

WsUser::~WsUser() {
  // @@protoc_insertion_point(destructor:protobuf.WsUser)
  SharedDtor();
}

void WsUser::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void WsUser::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* WsUser::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return WsUser_descriptor_;
}

const WsUser& WsUser::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_character_2eproto();
  return *default_instance_;
}

WsUser* WsUser::default_instance_ = NULL;

WsUser* WsUser::New(::google::protobuf::Arena* arena) const {
  WsUser* n = new WsUser;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void WsUser::Clear() {
// @@protoc_insertion_point(message_clear_start:protobuf.WsUser)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(WsUser, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<WsUser*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 31u) {
    ZR_(char_id_, account_id_);
    ZR_(type_, level_);
    if (has_name()) {
      name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool WsUser::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:protobuf.WsUser)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 char_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &char_id_)));
          set_has_char_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_account_id;
        break;
      }

      // optional int64 account_id = 2;
      case 2: {
        if (tag == 16) {
         parse_account_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &account_id_)));
          set_has_account_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_name;
        break;
      }

      // optional string name = 3;
      case 3: {
        if (tag == 26) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "protobuf.WsUser.name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_type;
        break;
      }

      // optional int32 type = 4;
      case 4: {
        if (tag == 32) {
         parse_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_level;
        break;
      }

      // optional int32 level = 5;
      case 5: {
        if (tag == 40) {
         parse_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:protobuf.WsUser)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:protobuf.WsUser)
  return false;
#undef DO_
}

void WsUser::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:protobuf.WsUser)
  // optional int64 char_id = 1;
  if (has_char_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->char_id(), output);
  }

  // optional int64 account_id = 2;
  if (has_account_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->account_id(), output);
  }

  // optional string name = 3;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "protobuf.WsUser.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->name(), output);
  }

  // optional int32 type = 4;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->type(), output);
  }

  // optional int32 level = 5;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->level(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:protobuf.WsUser)
}

::google::protobuf::uint8* WsUser::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:protobuf.WsUser)
  // optional int64 char_id = 1;
  if (has_char_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->char_id(), target);
  }

  // optional int64 account_id = 2;
  if (has_account_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->account_id(), target);
  }

  // optional string name = 3;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "protobuf.WsUser.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->name(), target);
  }

  // optional int32 type = 4;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->type(), target);
  }

  // optional int32 level = 5;
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->level(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protobuf.WsUser)
  return target;
}

int WsUser::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:protobuf.WsUser)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 31u) {
    // optional int64 char_id = 1;
    if (has_char_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->char_id());
    }

    // optional int64 account_id = 2;
    if (has_account_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->account_id());
    }

    // optional string name = 3;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional int32 type = 4;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }

    // optional int32 level = 5;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->level());
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void WsUser::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:protobuf.WsUser)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const WsUser* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const WsUser>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:protobuf.WsUser)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:protobuf.WsUser)
    MergeFrom(*source);
  }
}

void WsUser::MergeFrom(const WsUser& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protobuf.WsUser)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_char_id()) {
      set_char_id(from.char_id());
    }
    if (from.has_account_id()) {
      set_account_id(from.account_id());
    }
    if (from.has_name()) {
      set_has_name();
      name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_level()) {
      set_level(from.level());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void WsUser::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:protobuf.WsUser)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WsUser::CopyFrom(const WsUser& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protobuf.WsUser)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WsUser::IsInitialized() const {

  return true;
}

void WsUser::Swap(WsUser* other) {
  if (other == this) return;
  InternalSwap(other);
}
void WsUser::InternalSwap(WsUser* other) {
  std::swap(char_id_, other->char_id_);
  std::swap(account_id_, other->account_id_);
  name_.Swap(&other->name_);
  std::swap(type_, other->type_);
  std::swap(level_, other->level_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata WsUser::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = WsUser_descriptor_;
  metadata.reflection = WsUser_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// WsUser

// optional int64 char_id = 1;
bool WsUser::has_char_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void WsUser::set_has_char_id() {
  _has_bits_[0] |= 0x00000001u;
}
void WsUser::clear_has_char_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void WsUser::clear_char_id() {
  char_id_ = GOOGLE_LONGLONG(0);
  clear_has_char_id();
}
 ::google::protobuf::int64 WsUser::char_id() const {
  // @@protoc_insertion_point(field_get:protobuf.WsUser.char_id)
  return char_id_;
}
 void WsUser::set_char_id(::google::protobuf::int64 value) {
  set_has_char_id();
  char_id_ = value;
  // @@protoc_insertion_point(field_set:protobuf.WsUser.char_id)
}

// optional int64 account_id = 2;
bool WsUser::has_account_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void WsUser::set_has_account_id() {
  _has_bits_[0] |= 0x00000002u;
}
void WsUser::clear_has_account_id() {
  _has_bits_[0] &= ~0x00000002u;
}
void WsUser::clear_account_id() {
  account_id_ = GOOGLE_LONGLONG(0);
  clear_has_account_id();
}
 ::google::protobuf::int64 WsUser::account_id() const {
  // @@protoc_insertion_point(field_get:protobuf.WsUser.account_id)
  return account_id_;
}
 void WsUser::set_account_id(::google::protobuf::int64 value) {
  set_has_account_id();
  account_id_ = value;
  // @@protoc_insertion_point(field_set:protobuf.WsUser.account_id)
}

// optional string name = 3;
bool WsUser::has_name() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void WsUser::set_has_name() {
  _has_bits_[0] |= 0x00000004u;
}
void WsUser::clear_has_name() {
  _has_bits_[0] &= ~0x00000004u;
}
void WsUser::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
 const ::std::string& WsUser::name() const {
  // @@protoc_insertion_point(field_get:protobuf.WsUser.name)
  return name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void WsUser::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:protobuf.WsUser.name)
}
 void WsUser::set_name(const char* value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:protobuf.WsUser.name)
}
 void WsUser::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:protobuf.WsUser.name)
}
 ::std::string* WsUser::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:protobuf.WsUser.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* WsUser::release_name() {
  // @@protoc_insertion_point(field_release:protobuf.WsUser.name)
  clear_has_name();
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void WsUser::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:protobuf.WsUser.name)
}

// optional int32 type = 4;
bool WsUser::has_type() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void WsUser::set_has_type() {
  _has_bits_[0] |= 0x00000008u;
}
void WsUser::clear_has_type() {
  _has_bits_[0] &= ~0x00000008u;
}
void WsUser::clear_type() {
  type_ = 0;
  clear_has_type();
}
 ::google::protobuf::int32 WsUser::type() const {
  // @@protoc_insertion_point(field_get:protobuf.WsUser.type)
  return type_;
}
 void WsUser::set_type(::google::protobuf::int32 value) {
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:protobuf.WsUser.type)
}

// optional int32 level = 5;
bool WsUser::has_level() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void WsUser::set_has_level() {
  _has_bits_[0] |= 0x00000010u;
}
void WsUser::clear_has_level() {
  _has_bits_[0] &= ~0x00000010u;
}
void WsUser::clear_level() {
  level_ = 0;
  clear_has_level();
}
 ::google::protobuf::int32 WsUser::level() const {
  // @@protoc_insertion_point(field_get:protobuf.WsUser.level)
  return level_;
}
 void WsUser::set_level(::google::protobuf::int32 value) {
  set_has_level();
  level_ = value;
  // @@protoc_insertion_point(field_set:protobuf.WsUser.level)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace protobuf

// @@protoc_insertion_point(global_scope)
