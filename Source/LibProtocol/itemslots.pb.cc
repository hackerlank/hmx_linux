// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: itemslots.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "itemslots.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace protobuf {

namespace {

const ::google::protobuf::Descriptor* ItemInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ItemInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* ItemBinaryData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ItemBinaryData_reflection_ = NULL;
const ::google::protobuf::Descriptor* Itemslots_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Itemslots_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_itemslots_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AssignDesc_itemslots_2eproto() {
  protobuf_AddDesc_itemslots_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "itemslots.proto");
  GOOGLE_CHECK(file != NULL);
  ItemInfo_descriptor_ = file->message_type(0);
  static const int ItemInfo_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ItemInfo, itemid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ItemInfo, itemnum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ItemInfo, index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ItemInfo, uniqueid_),
  };
  ItemInfo_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ItemInfo_descriptor_,
      ItemInfo::default_instance_,
      ItemInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ItemInfo, _has_bits_[0]),
      -1,
      -1,
      sizeof(ItemInfo),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ItemInfo, _internal_metadata_),
      -1);
  ItemBinaryData_descriptor_ = file->message_type(1);
  static const int ItemBinaryData_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ItemBinaryData, items_),
  };
  ItemBinaryData_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ItemBinaryData_descriptor_,
      ItemBinaryData::default_instance_,
      ItemBinaryData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ItemBinaryData, _has_bits_[0]),
      -1,
      -1,
      sizeof(ItemBinaryData),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ItemBinaryData, _internal_metadata_),
      -1);
  Itemslots_descriptor_ = file->message_type(2);
  static const int Itemslots_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Itemslots, char_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Itemslots, capacity_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Itemslots, usecapacity_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Itemslots, binary_data_),
  };
  Itemslots_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Itemslots_descriptor_,
      Itemslots::default_instance_,
      Itemslots_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Itemslots, _has_bits_[0]),
      -1,
      -1,
      sizeof(Itemslots),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Itemslots, _internal_metadata_),
      -1);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_itemslots_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ItemInfo_descriptor_, &ItemInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ItemBinaryData_descriptor_, &ItemBinaryData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Itemslots_descriptor_, &Itemslots::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_itemslots_2eproto() {
  delete ItemInfo::default_instance_;
  delete ItemInfo_reflection_;
  delete ItemBinaryData::default_instance_;
  delete ItemBinaryData_reflection_;
  delete Itemslots::default_instance_;
  delete Itemslots_reflection_;
}

void protobuf_AddDesc_itemslots_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AddDesc_itemslots_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\017itemslots.proto\022\010protobuf\"L\n\010ItemInfo\022"
    "\016\n\006itemid\030\001 \001(\005\022\017\n\007itemnum\030\002 \001(\005\022\r\n\005inde"
    "x\030\003 \001(\005\022\020\n\010uniqueid\030\004 \001(\005\"3\n\016ItemBinaryD"
    "ata\022!\n\005items\030\001 \003(\0132\022.protobuf.ItemInfo\"r"
    "\n\tItemslots\022\017\n\007char_id\030\001 \001(\003\022\020\n\010capacity"
    "\030\002 \001(\005\022\023\n\013usecapacity\030\003 \001(\005\022-\n\013binary_da"
    "ta\030\004 \001(\0132\030.protobuf.ItemBinaryData", 274);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "itemslots.proto", &protobuf_RegisterTypes);
  ItemInfo::default_instance_ = new ItemInfo();
  ItemBinaryData::default_instance_ = new ItemBinaryData();
  Itemslots::default_instance_ = new Itemslots();
  ItemInfo::default_instance_->InitAsDefaultInstance();
  ItemBinaryData::default_instance_->InitAsDefaultInstance();
  Itemslots::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_itemslots_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_itemslots_2eproto {
  StaticDescriptorInitializer_itemslots_2eproto() {
    protobuf_AddDesc_itemslots_2eproto();
  }
} static_descriptor_initializer_itemslots_2eproto_;

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ItemInfo::kItemidFieldNumber;
const int ItemInfo::kItemnumFieldNumber;
const int ItemInfo::kIndexFieldNumber;
const int ItemInfo::kUniqueidFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ItemInfo::ItemInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:protobuf.ItemInfo)
}

void ItemInfo::InitAsDefaultInstance() {
}

ItemInfo::ItemInfo(const ItemInfo& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:protobuf.ItemInfo)
}

void ItemInfo::SharedCtor() {
  _cached_size_ = 0;
  itemid_ = 0;
  itemnum_ = 0;
  index_ = 0;
  uniqueid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ItemInfo::~ItemInfo() {
  // @@protoc_insertion_point(destructor:protobuf.ItemInfo)
  SharedDtor();
}

void ItemInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ItemInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ItemInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ItemInfo_descriptor_;
}

const ItemInfo& ItemInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_itemslots_2eproto();
  return *default_instance_;
}

ItemInfo* ItemInfo::default_instance_ = NULL;

ItemInfo* ItemInfo::New(::google::protobuf::Arena* arena) const {
  ItemInfo* n = new ItemInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ItemInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:protobuf.ItemInfo)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(ItemInfo, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<ItemInfo*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(itemid_, uniqueid_);

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool ItemInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:protobuf.ItemInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 itemid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &itemid_)));
          set_has_itemid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_itemnum;
        break;
      }

      // optional int32 itemnum = 2;
      case 2: {
        if (tag == 16) {
         parse_itemnum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &itemnum_)));
          set_has_itemnum();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_index;
        break;
      }

      // optional int32 index = 3;
      case 3: {
        if (tag == 24) {
         parse_index:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &index_)));
          set_has_index();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_uniqueid;
        break;
      }

      // optional int32 uniqueid = 4;
      case 4: {
        if (tag == 32) {
         parse_uniqueid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &uniqueid_)));
          set_has_uniqueid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:protobuf.ItemInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:protobuf.ItemInfo)
  return false;
#undef DO_
}

void ItemInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:protobuf.ItemInfo)
  // optional int32 itemid = 1;
  if (has_itemid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->itemid(), output);
  }

  // optional int32 itemnum = 2;
  if (has_itemnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->itemnum(), output);
  }

  // optional int32 index = 3;
  if (has_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->index(), output);
  }

  // optional int32 uniqueid = 4;
  if (has_uniqueid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->uniqueid(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:protobuf.ItemInfo)
}

::google::protobuf::uint8* ItemInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:protobuf.ItemInfo)
  // optional int32 itemid = 1;
  if (has_itemid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->itemid(), target);
  }

  // optional int32 itemnum = 2;
  if (has_itemnum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->itemnum(), target);
  }

  // optional int32 index = 3;
  if (has_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->index(), target);
  }

  // optional int32 uniqueid = 4;
  if (has_uniqueid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->uniqueid(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protobuf.ItemInfo)
  return target;
}

int ItemInfo::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:protobuf.ItemInfo)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 15u) {
    // optional int32 itemid = 1;
    if (has_itemid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->itemid());
    }

    // optional int32 itemnum = 2;
    if (has_itemnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->itemnum());
    }

    // optional int32 index = 3;
    if (has_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->index());
    }

    // optional int32 uniqueid = 4;
    if (has_uniqueid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->uniqueid());
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ItemInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:protobuf.ItemInfo)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const ItemInfo* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const ItemInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:protobuf.ItemInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:protobuf.ItemInfo)
    MergeFrom(*source);
  }
}

void ItemInfo::MergeFrom(const ItemInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protobuf.ItemInfo)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_itemid()) {
      set_itemid(from.itemid());
    }
    if (from.has_itemnum()) {
      set_itemnum(from.itemnum());
    }
    if (from.has_index()) {
      set_index(from.index());
    }
    if (from.has_uniqueid()) {
      set_uniqueid(from.uniqueid());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void ItemInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:protobuf.ItemInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ItemInfo::CopyFrom(const ItemInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protobuf.ItemInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ItemInfo::IsInitialized() const {

  return true;
}

void ItemInfo::Swap(ItemInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ItemInfo::InternalSwap(ItemInfo* other) {
  std::swap(itemid_, other->itemid_);
  std::swap(itemnum_, other->itemnum_);
  std::swap(index_, other->index_);
  std::swap(uniqueid_, other->uniqueid_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ItemInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ItemInfo_descriptor_;
  metadata.reflection = ItemInfo_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ItemInfo

// optional int32 itemid = 1;
bool ItemInfo::has_itemid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void ItemInfo::set_has_itemid() {
  _has_bits_[0] |= 0x00000001u;
}
void ItemInfo::clear_has_itemid() {
  _has_bits_[0] &= ~0x00000001u;
}
void ItemInfo::clear_itemid() {
  itemid_ = 0;
  clear_has_itemid();
}
 ::google::protobuf::int32 ItemInfo::itemid() const {
  // @@protoc_insertion_point(field_get:protobuf.ItemInfo.itemid)
  return itemid_;
}
 void ItemInfo::set_itemid(::google::protobuf::int32 value) {
  set_has_itemid();
  itemid_ = value;
  // @@protoc_insertion_point(field_set:protobuf.ItemInfo.itemid)
}

// optional int32 itemnum = 2;
bool ItemInfo::has_itemnum() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void ItemInfo::set_has_itemnum() {
  _has_bits_[0] |= 0x00000002u;
}
void ItemInfo::clear_has_itemnum() {
  _has_bits_[0] &= ~0x00000002u;
}
void ItemInfo::clear_itemnum() {
  itemnum_ = 0;
  clear_has_itemnum();
}
 ::google::protobuf::int32 ItemInfo::itemnum() const {
  // @@protoc_insertion_point(field_get:protobuf.ItemInfo.itemnum)
  return itemnum_;
}
 void ItemInfo::set_itemnum(::google::protobuf::int32 value) {
  set_has_itemnum();
  itemnum_ = value;
  // @@protoc_insertion_point(field_set:protobuf.ItemInfo.itemnum)
}

// optional int32 index = 3;
bool ItemInfo::has_index() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void ItemInfo::set_has_index() {
  _has_bits_[0] |= 0x00000004u;
}
void ItemInfo::clear_has_index() {
  _has_bits_[0] &= ~0x00000004u;
}
void ItemInfo::clear_index() {
  index_ = 0;
  clear_has_index();
}
 ::google::protobuf::int32 ItemInfo::index() const {
  // @@protoc_insertion_point(field_get:protobuf.ItemInfo.index)
  return index_;
}
 void ItemInfo::set_index(::google::protobuf::int32 value) {
  set_has_index();
  index_ = value;
  // @@protoc_insertion_point(field_set:protobuf.ItemInfo.index)
}

// optional int32 uniqueid = 4;
bool ItemInfo::has_uniqueid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void ItemInfo::set_has_uniqueid() {
  _has_bits_[0] |= 0x00000008u;
}
void ItemInfo::clear_has_uniqueid() {
  _has_bits_[0] &= ~0x00000008u;
}
void ItemInfo::clear_uniqueid() {
  uniqueid_ = 0;
  clear_has_uniqueid();
}
 ::google::protobuf::int32 ItemInfo::uniqueid() const {
  // @@protoc_insertion_point(field_get:protobuf.ItemInfo.uniqueid)
  return uniqueid_;
}
 void ItemInfo::set_uniqueid(::google::protobuf::int32 value) {
  set_has_uniqueid();
  uniqueid_ = value;
  // @@protoc_insertion_point(field_set:protobuf.ItemInfo.uniqueid)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ItemBinaryData::kItemsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ItemBinaryData::ItemBinaryData()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:protobuf.ItemBinaryData)
}

void ItemBinaryData::InitAsDefaultInstance() {
}

ItemBinaryData::ItemBinaryData(const ItemBinaryData& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:protobuf.ItemBinaryData)
}

void ItemBinaryData::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ItemBinaryData::~ItemBinaryData() {
  // @@protoc_insertion_point(destructor:protobuf.ItemBinaryData)
  SharedDtor();
}

void ItemBinaryData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ItemBinaryData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ItemBinaryData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ItemBinaryData_descriptor_;
}

const ItemBinaryData& ItemBinaryData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_itemslots_2eproto();
  return *default_instance_;
}

ItemBinaryData* ItemBinaryData::default_instance_ = NULL;

ItemBinaryData* ItemBinaryData::New(::google::protobuf::Arena* arena) const {
  ItemBinaryData* n = new ItemBinaryData;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ItemBinaryData::Clear() {
// @@protoc_insertion_point(message_clear_start:protobuf.ItemBinaryData)
  items_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool ItemBinaryData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:protobuf.ItemBinaryData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .protobuf.ItemInfo items = 1;
      case 1: {
        if (tag == 10) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_items:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_items()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_loop_items;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:protobuf.ItemBinaryData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:protobuf.ItemBinaryData)
  return false;
#undef DO_
}

void ItemBinaryData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:protobuf.ItemBinaryData)
  // repeated .protobuf.ItemInfo items = 1;
  for (unsigned int i = 0, n = this->items_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->items(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:protobuf.ItemBinaryData)
}

::google::protobuf::uint8* ItemBinaryData::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:protobuf.ItemBinaryData)
  // repeated .protobuf.ItemInfo items = 1;
  for (unsigned int i = 0, n = this->items_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->items(i), false, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protobuf.ItemBinaryData)
  return target;
}

int ItemBinaryData::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:protobuf.ItemBinaryData)
  int total_size = 0;

  // repeated .protobuf.ItemInfo items = 1;
  total_size += 1 * this->items_size();
  for (int i = 0; i < this->items_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->items(i));
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ItemBinaryData::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:protobuf.ItemBinaryData)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const ItemBinaryData* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const ItemBinaryData>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:protobuf.ItemBinaryData)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:protobuf.ItemBinaryData)
    MergeFrom(*source);
  }
}

void ItemBinaryData::MergeFrom(const ItemBinaryData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protobuf.ItemBinaryData)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  items_.MergeFrom(from.items_);
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void ItemBinaryData::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:protobuf.ItemBinaryData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ItemBinaryData::CopyFrom(const ItemBinaryData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protobuf.ItemBinaryData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ItemBinaryData::IsInitialized() const {

  return true;
}

void ItemBinaryData::Swap(ItemBinaryData* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ItemBinaryData::InternalSwap(ItemBinaryData* other) {
  items_.UnsafeArenaSwap(&other->items_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ItemBinaryData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ItemBinaryData_descriptor_;
  metadata.reflection = ItemBinaryData_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ItemBinaryData

// repeated .protobuf.ItemInfo items = 1;
int ItemBinaryData::items_size() const {
  return items_.size();
}
void ItemBinaryData::clear_items() {
  items_.Clear();
}
const ::protobuf::ItemInfo& ItemBinaryData::items(int index) const {
  // @@protoc_insertion_point(field_get:protobuf.ItemBinaryData.items)
  return items_.Get(index);
}
::protobuf::ItemInfo* ItemBinaryData::mutable_items(int index) {
  // @@protoc_insertion_point(field_mutable:protobuf.ItemBinaryData.items)
  return items_.Mutable(index);
}
::protobuf::ItemInfo* ItemBinaryData::add_items() {
  // @@protoc_insertion_point(field_add:protobuf.ItemBinaryData.items)
  return items_.Add();
}
::google::protobuf::RepeatedPtrField< ::protobuf::ItemInfo >*
ItemBinaryData::mutable_items() {
  // @@protoc_insertion_point(field_mutable_list:protobuf.ItemBinaryData.items)
  return &items_;
}
const ::google::protobuf::RepeatedPtrField< ::protobuf::ItemInfo >&
ItemBinaryData::items() const {
  // @@protoc_insertion_point(field_list:protobuf.ItemBinaryData.items)
  return items_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Itemslots::kCharIdFieldNumber;
const int Itemslots::kCapacityFieldNumber;
const int Itemslots::kUsecapacityFieldNumber;
const int Itemslots::kBinaryDataFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Itemslots::Itemslots()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:protobuf.Itemslots)
}

void Itemslots::InitAsDefaultInstance() {
  binary_data_ = const_cast< ::protobuf::ItemBinaryData*>(&::protobuf::ItemBinaryData::default_instance());
}

Itemslots::Itemslots(const Itemslots& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:protobuf.Itemslots)
}

void Itemslots::SharedCtor() {
  _cached_size_ = 0;
  char_id_ = GOOGLE_LONGLONG(0);
  capacity_ = 0;
  usecapacity_ = 0;
  binary_data_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Itemslots::~Itemslots() {
  // @@protoc_insertion_point(destructor:protobuf.Itemslots)
  SharedDtor();
}

void Itemslots::SharedDtor() {
  if (this != default_instance_) {
    delete binary_data_;
  }
}

void Itemslots::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Itemslots::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Itemslots_descriptor_;
}

const Itemslots& Itemslots::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_itemslots_2eproto();
  return *default_instance_;
}

Itemslots* Itemslots::default_instance_ = NULL;

Itemslots* Itemslots::New(::google::protobuf::Arena* arena) const {
  Itemslots* n = new Itemslots;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Itemslots::Clear() {
// @@protoc_insertion_point(message_clear_start:protobuf.Itemslots)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(Itemslots, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<Itemslots*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 15u) {
    ZR_(char_id_, usecapacity_);
    if (has_binary_data()) {
      if (binary_data_ != NULL) binary_data_->::protobuf::ItemBinaryData::Clear();
    }
  }

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool Itemslots::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:protobuf.Itemslots)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 char_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &char_id_)));
          set_has_char_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_capacity;
        break;
      }

      // optional int32 capacity = 2;
      case 2: {
        if (tag == 16) {
         parse_capacity:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &capacity_)));
          set_has_capacity();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_usecapacity;
        break;
      }

      // optional int32 usecapacity = 3;
      case 3: {
        if (tag == 24) {
         parse_usecapacity:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &usecapacity_)));
          set_has_usecapacity();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_binary_data;
        break;
      }

      // optional .protobuf.ItemBinaryData binary_data = 4;
      case 4: {
        if (tag == 34) {
         parse_binary_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_binary_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:protobuf.Itemslots)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:protobuf.Itemslots)
  return false;
#undef DO_
}

void Itemslots::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:protobuf.Itemslots)
  // optional int64 char_id = 1;
  if (has_char_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->char_id(), output);
  }

  // optional int32 capacity = 2;
  if (has_capacity()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->capacity(), output);
  }

  // optional int32 usecapacity = 3;
  if (has_usecapacity()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->usecapacity(), output);
  }

  // optional .protobuf.ItemBinaryData binary_data = 4;
  if (has_binary_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *this->binary_data_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:protobuf.Itemslots)
}

::google::protobuf::uint8* Itemslots::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:protobuf.Itemslots)
  // optional int64 char_id = 1;
  if (has_char_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->char_id(), target);
  }

  // optional int32 capacity = 2;
  if (has_capacity()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->capacity(), target);
  }

  // optional int32 usecapacity = 3;
  if (has_usecapacity()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->usecapacity(), target);
  }

  // optional .protobuf.ItemBinaryData binary_data = 4;
  if (has_binary_data()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, *this->binary_data_, false, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protobuf.Itemslots)
  return target;
}

int Itemslots::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:protobuf.Itemslots)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 15u) {
    // optional int64 char_id = 1;
    if (has_char_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->char_id());
    }

    // optional int32 capacity = 2;
    if (has_capacity()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->capacity());
    }

    // optional int32 usecapacity = 3;
    if (has_usecapacity()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->usecapacity());
    }

    // optional .protobuf.ItemBinaryData binary_data = 4;
    if (has_binary_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->binary_data_);
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Itemslots::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:protobuf.Itemslots)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const Itemslots* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Itemslots>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:protobuf.Itemslots)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:protobuf.Itemslots)
    MergeFrom(*source);
  }
}

void Itemslots::MergeFrom(const Itemslots& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protobuf.Itemslots)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_char_id()) {
      set_char_id(from.char_id());
    }
    if (from.has_capacity()) {
      set_capacity(from.capacity());
    }
    if (from.has_usecapacity()) {
      set_usecapacity(from.usecapacity());
    }
    if (from.has_binary_data()) {
      mutable_binary_data()->::protobuf::ItemBinaryData::MergeFrom(from.binary_data());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void Itemslots::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:protobuf.Itemslots)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Itemslots::CopyFrom(const Itemslots& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protobuf.Itemslots)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Itemslots::IsInitialized() const {

  return true;
}

void Itemslots::Swap(Itemslots* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Itemslots::InternalSwap(Itemslots* other) {
  std::swap(char_id_, other->char_id_);
  std::swap(capacity_, other->capacity_);
  std::swap(usecapacity_, other->usecapacity_);
  std::swap(binary_data_, other->binary_data_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Itemslots::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Itemslots_descriptor_;
  metadata.reflection = Itemslots_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Itemslots

// optional int64 char_id = 1;
bool Itemslots::has_char_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Itemslots::set_has_char_id() {
  _has_bits_[0] |= 0x00000001u;
}
void Itemslots::clear_has_char_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void Itemslots::clear_char_id() {
  char_id_ = GOOGLE_LONGLONG(0);
  clear_has_char_id();
}
 ::google::protobuf::int64 Itemslots::char_id() const {
  // @@protoc_insertion_point(field_get:protobuf.Itemslots.char_id)
  return char_id_;
}
 void Itemslots::set_char_id(::google::protobuf::int64 value) {
  set_has_char_id();
  char_id_ = value;
  // @@protoc_insertion_point(field_set:protobuf.Itemslots.char_id)
}

// optional int32 capacity = 2;
bool Itemslots::has_capacity() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void Itemslots::set_has_capacity() {
  _has_bits_[0] |= 0x00000002u;
}
void Itemslots::clear_has_capacity() {
  _has_bits_[0] &= ~0x00000002u;
}
void Itemslots::clear_capacity() {
  capacity_ = 0;
  clear_has_capacity();
}
 ::google::protobuf::int32 Itemslots::capacity() const {
  // @@protoc_insertion_point(field_get:protobuf.Itemslots.capacity)
  return capacity_;
}
 void Itemslots::set_capacity(::google::protobuf::int32 value) {
  set_has_capacity();
  capacity_ = value;
  // @@protoc_insertion_point(field_set:protobuf.Itemslots.capacity)
}

// optional int32 usecapacity = 3;
bool Itemslots::has_usecapacity() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void Itemslots::set_has_usecapacity() {
  _has_bits_[0] |= 0x00000004u;
}
void Itemslots::clear_has_usecapacity() {
  _has_bits_[0] &= ~0x00000004u;
}
void Itemslots::clear_usecapacity() {
  usecapacity_ = 0;
  clear_has_usecapacity();
}
 ::google::protobuf::int32 Itemslots::usecapacity() const {
  // @@protoc_insertion_point(field_get:protobuf.Itemslots.usecapacity)
  return usecapacity_;
}
 void Itemslots::set_usecapacity(::google::protobuf::int32 value) {
  set_has_usecapacity();
  usecapacity_ = value;
  // @@protoc_insertion_point(field_set:protobuf.Itemslots.usecapacity)
}

// optional .protobuf.ItemBinaryData binary_data = 4;
bool Itemslots::has_binary_data() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void Itemslots::set_has_binary_data() {
  _has_bits_[0] |= 0x00000008u;
}
void Itemslots::clear_has_binary_data() {
  _has_bits_[0] &= ~0x00000008u;
}
void Itemslots::clear_binary_data() {
  if (binary_data_ != NULL) binary_data_->::protobuf::ItemBinaryData::Clear();
  clear_has_binary_data();
}
const ::protobuf::ItemBinaryData& Itemslots::binary_data() const {
  // @@protoc_insertion_point(field_get:protobuf.Itemslots.binary_data)
  return binary_data_ != NULL ? *binary_data_ : *default_instance_->binary_data_;
}
::protobuf::ItemBinaryData* Itemslots::mutable_binary_data() {
  set_has_binary_data();
  if (binary_data_ == NULL) {
    binary_data_ = new ::protobuf::ItemBinaryData;
  }
  // @@protoc_insertion_point(field_mutable:protobuf.Itemslots.binary_data)
  return binary_data_;
}
::protobuf::ItemBinaryData* Itemslots::release_binary_data() {
  // @@protoc_insertion_point(field_release:protobuf.Itemslots.binary_data)
  clear_has_binary_data();
  ::protobuf::ItemBinaryData* temp = binary_data_;
  binary_data_ = NULL;
  return temp;
}
void Itemslots::set_allocated_binary_data(::protobuf::ItemBinaryData* binary_data) {
  delete binary_data_;
  binary_data_ = binary_data;
  if (binary_data) {
    set_has_binary_data();
  } else {
    clear_has_binary_data();
  }
  // @@protoc_insertion_point(field_set_allocated:protobuf.Itemslots.binary_data)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace protobuf

// @@protoc_insertion_point(global_scope)
