// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: chatmsg.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "chatmsg.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace protobuf {

namespace {

const ::google::protobuf::Descriptor* MsgConent_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgConent_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgMark_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgMark_reflection_ = NULL;
const ::google::protobuf::Descriptor* ChatMsgBinary_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ChatMsgBinary_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_chatmsg_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AssignDesc_chatmsg_2eproto() {
  protobuf_AddDesc_chatmsg_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "chatmsg.proto");
  GOOGLE_CHECK(file != NULL);
  MsgConent_descriptor_ = file->message_type(0);
  static const int MsgConent_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgConent, msgid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgConent, senduid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgConent, sendname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgConent, sendtime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgConent, conent_),
  };
  MsgConent_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      MsgConent_descriptor_,
      MsgConent::default_instance_,
      MsgConent_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgConent, _has_bits_[0]),
      -1,
      -1,
      sizeof(MsgConent),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgConent, _internal_metadata_),
      -1);
  MsgMark_descriptor_ = file->message_type(1);
  static const int MsgMark_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgMark, opentime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgMark, lasttime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgMark, readuids_),
  };
  MsgMark_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      MsgMark_descriptor_,
      MsgMark::default_instance_,
      MsgMark_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgMark, _has_bits_[0]),
      -1,
      -1,
      sizeof(MsgMark),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgMark, _internal_metadata_),
      -1);
  ChatMsgBinary_descriptor_ = file->message_type(2);
  static const int ChatMsgBinary_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChatMsgBinary, conent_),
  };
  ChatMsgBinary_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ChatMsgBinary_descriptor_,
      ChatMsgBinary::default_instance_,
      ChatMsgBinary_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChatMsgBinary, _has_bits_[0]),
      -1,
      -1,
      sizeof(ChatMsgBinary),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChatMsgBinary, _internal_metadata_),
      -1);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_chatmsg_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      MsgConent_descriptor_, &MsgConent::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      MsgMark_descriptor_, &MsgMark::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ChatMsgBinary_descriptor_, &ChatMsgBinary::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_chatmsg_2eproto() {
  delete MsgConent::default_instance_;
  delete MsgConent_reflection_;
  delete MsgMark::default_instance_;
  delete MsgMark_reflection_;
  delete ChatMsgBinary::default_instance_;
  delete ChatMsgBinary_reflection_;
}

void protobuf_AddDesc_chatmsg_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AddDesc_chatmsg_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\rchatmsg.proto\022\010protobuf\"_\n\tMsgConent\022\r"
    "\n\005msgid\030\001 \001(\003\022\017\n\007senduid\030\002 \001(\003\022\020\n\010sendna"
    "me\030\003 \001(\t\022\020\n\010sendtime\030\004 \001(\005\022\016\n\006conent\030\005 \001"
    "(\t\"\?\n\007MsgMark\022\020\n\010opentime\030\001 \001(\005\022\020\n\010lastt"
    "ime\030\002 \001(\005\022\020\n\010readuids\030\003 \003(\003\"4\n\rChatMsgBi"
    "nary\022#\n\006conent\030\001 \001(\0132\023.protobuf.MsgConen"
    "t", 241);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "chatmsg.proto", &protobuf_RegisterTypes);
  MsgConent::default_instance_ = new MsgConent();
  MsgMark::default_instance_ = new MsgMark();
  ChatMsgBinary::default_instance_ = new ChatMsgBinary();
  MsgConent::default_instance_->InitAsDefaultInstance();
  MsgMark::default_instance_->InitAsDefaultInstance();
  ChatMsgBinary::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_chatmsg_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_chatmsg_2eproto {
  StaticDescriptorInitializer_chatmsg_2eproto() {
    protobuf_AddDesc_chatmsg_2eproto();
  }
} static_descriptor_initializer_chatmsg_2eproto_;

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MsgConent::kMsgidFieldNumber;
const int MsgConent::kSenduidFieldNumber;
const int MsgConent::kSendnameFieldNumber;
const int MsgConent::kSendtimeFieldNumber;
const int MsgConent::kConentFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MsgConent::MsgConent()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:protobuf.MsgConent)
}

void MsgConent::InitAsDefaultInstance() {
}

MsgConent::MsgConent(const MsgConent& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:protobuf.MsgConent)
}

void MsgConent::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  msgid_ = GOOGLE_LONGLONG(0);
  senduid_ = GOOGLE_LONGLONG(0);
  sendname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  sendtime_ = 0;
  conent_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgConent::~MsgConent() {
  // @@protoc_insertion_point(destructor:protobuf.MsgConent)
  SharedDtor();
}

void MsgConent::SharedDtor() {
  sendname_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  conent_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void MsgConent::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgConent::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgConent_descriptor_;
}

const MsgConent& MsgConent::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_chatmsg_2eproto();
  return *default_instance_;
}

MsgConent* MsgConent::default_instance_ = NULL;

MsgConent* MsgConent::New(::google::protobuf::Arena* arena) const {
  MsgConent* n = new MsgConent;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void MsgConent::Clear() {
// @@protoc_insertion_point(message_clear_start:protobuf.MsgConent)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(MsgConent, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<MsgConent*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 31u) {
    ZR_(msgid_, senduid_);
    if (has_sendname()) {
      sendname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    sendtime_ = 0;
    if (has_conent()) {
      conent_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool MsgConent::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:protobuf.MsgConent)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 msgid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &msgid_)));
          set_has_msgid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_senduid;
        break;
      }

      // optional int64 senduid = 2;
      case 2: {
        if (tag == 16) {
         parse_senduid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &senduid_)));
          set_has_senduid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_sendname;
        break;
      }

      // optional string sendname = 3;
      case 3: {
        if (tag == 26) {
         parse_sendname:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_sendname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->sendname().data(), this->sendname().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "protobuf.MsgConent.sendname");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_sendtime;
        break;
      }

      // optional int32 sendtime = 4;
      case 4: {
        if (tag == 32) {
         parse_sendtime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sendtime_)));
          set_has_sendtime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_conent;
        break;
      }

      // optional string conent = 5;
      case 5: {
        if (tag == 42) {
         parse_conent:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_conent()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->conent().data(), this->conent().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "protobuf.MsgConent.conent");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:protobuf.MsgConent)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:protobuf.MsgConent)
  return false;
#undef DO_
}

void MsgConent::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:protobuf.MsgConent)
  // optional int64 msgid = 1;
  if (has_msgid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->msgid(), output);
  }

  // optional int64 senduid = 2;
  if (has_senduid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->senduid(), output);
  }

  // optional string sendname = 3;
  if (has_sendname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->sendname().data(), this->sendname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "protobuf.MsgConent.sendname");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->sendname(), output);
  }

  // optional int32 sendtime = 4;
  if (has_sendtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->sendtime(), output);
  }

  // optional string conent = 5;
  if (has_conent()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->conent().data(), this->conent().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "protobuf.MsgConent.conent");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->conent(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:protobuf.MsgConent)
}

::google::protobuf::uint8* MsgConent::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:protobuf.MsgConent)
  // optional int64 msgid = 1;
  if (has_msgid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->msgid(), target);
  }

  // optional int64 senduid = 2;
  if (has_senduid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->senduid(), target);
  }

  // optional string sendname = 3;
  if (has_sendname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->sendname().data(), this->sendname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "protobuf.MsgConent.sendname");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->sendname(), target);
  }

  // optional int32 sendtime = 4;
  if (has_sendtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->sendtime(), target);
  }

  // optional string conent = 5;
  if (has_conent()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->conent().data(), this->conent().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "protobuf.MsgConent.conent");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->conent(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protobuf.MsgConent)
  return target;
}

int MsgConent::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:protobuf.MsgConent)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 31u) {
    // optional int64 msgid = 1;
    if (has_msgid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->msgid());
    }

    // optional int64 senduid = 2;
    if (has_senduid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->senduid());
    }

    // optional string sendname = 3;
    if (has_sendname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->sendname());
    }

    // optional int32 sendtime = 4;
    if (has_sendtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->sendtime());
    }

    // optional string conent = 5;
    if (has_conent()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->conent());
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgConent::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:protobuf.MsgConent)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const MsgConent* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const MsgConent>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:protobuf.MsgConent)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:protobuf.MsgConent)
    MergeFrom(*source);
  }
}

void MsgConent::MergeFrom(const MsgConent& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protobuf.MsgConent)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgid()) {
      set_msgid(from.msgid());
    }
    if (from.has_senduid()) {
      set_senduid(from.senduid());
    }
    if (from.has_sendname()) {
      set_has_sendname();
      sendname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.sendname_);
    }
    if (from.has_sendtime()) {
      set_sendtime(from.sendtime());
    }
    if (from.has_conent()) {
      set_has_conent();
      conent_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.conent_);
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void MsgConent::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:protobuf.MsgConent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgConent::CopyFrom(const MsgConent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protobuf.MsgConent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgConent::IsInitialized() const {

  return true;
}

void MsgConent::Swap(MsgConent* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MsgConent::InternalSwap(MsgConent* other) {
  std::swap(msgid_, other->msgid_);
  std::swap(senduid_, other->senduid_);
  sendname_.Swap(&other->sendname_);
  std::swap(sendtime_, other->sendtime_);
  conent_.Swap(&other->conent_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata MsgConent::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgConent_descriptor_;
  metadata.reflection = MsgConent_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// MsgConent

// optional int64 msgid = 1;
bool MsgConent::has_msgid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void MsgConent::set_has_msgid() {
  _has_bits_[0] |= 0x00000001u;
}
void MsgConent::clear_has_msgid() {
  _has_bits_[0] &= ~0x00000001u;
}
void MsgConent::clear_msgid() {
  msgid_ = GOOGLE_LONGLONG(0);
  clear_has_msgid();
}
 ::google::protobuf::int64 MsgConent::msgid() const {
  // @@protoc_insertion_point(field_get:protobuf.MsgConent.msgid)
  return msgid_;
}
 void MsgConent::set_msgid(::google::protobuf::int64 value) {
  set_has_msgid();
  msgid_ = value;
  // @@protoc_insertion_point(field_set:protobuf.MsgConent.msgid)
}

// optional int64 senduid = 2;
bool MsgConent::has_senduid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void MsgConent::set_has_senduid() {
  _has_bits_[0] |= 0x00000002u;
}
void MsgConent::clear_has_senduid() {
  _has_bits_[0] &= ~0x00000002u;
}
void MsgConent::clear_senduid() {
  senduid_ = GOOGLE_LONGLONG(0);
  clear_has_senduid();
}
 ::google::protobuf::int64 MsgConent::senduid() const {
  // @@protoc_insertion_point(field_get:protobuf.MsgConent.senduid)
  return senduid_;
}
 void MsgConent::set_senduid(::google::protobuf::int64 value) {
  set_has_senduid();
  senduid_ = value;
  // @@protoc_insertion_point(field_set:protobuf.MsgConent.senduid)
}

// optional string sendname = 3;
bool MsgConent::has_sendname() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void MsgConent::set_has_sendname() {
  _has_bits_[0] |= 0x00000004u;
}
void MsgConent::clear_has_sendname() {
  _has_bits_[0] &= ~0x00000004u;
}
void MsgConent::clear_sendname() {
  sendname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_sendname();
}
 const ::std::string& MsgConent::sendname() const {
  // @@protoc_insertion_point(field_get:protobuf.MsgConent.sendname)
  return sendname_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void MsgConent::set_sendname(const ::std::string& value) {
  set_has_sendname();
  sendname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:protobuf.MsgConent.sendname)
}
 void MsgConent::set_sendname(const char* value) {
  set_has_sendname();
  sendname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:protobuf.MsgConent.sendname)
}
 void MsgConent::set_sendname(const char* value, size_t size) {
  set_has_sendname();
  sendname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:protobuf.MsgConent.sendname)
}
 ::std::string* MsgConent::mutable_sendname() {
  set_has_sendname();
  // @@protoc_insertion_point(field_mutable:protobuf.MsgConent.sendname)
  return sendname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* MsgConent::release_sendname() {
  // @@protoc_insertion_point(field_release:protobuf.MsgConent.sendname)
  clear_has_sendname();
  return sendname_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void MsgConent::set_allocated_sendname(::std::string* sendname) {
  if (sendname != NULL) {
    set_has_sendname();
  } else {
    clear_has_sendname();
  }
  sendname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), sendname);
  // @@protoc_insertion_point(field_set_allocated:protobuf.MsgConent.sendname)
}

// optional int32 sendtime = 4;
bool MsgConent::has_sendtime() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void MsgConent::set_has_sendtime() {
  _has_bits_[0] |= 0x00000008u;
}
void MsgConent::clear_has_sendtime() {
  _has_bits_[0] &= ~0x00000008u;
}
void MsgConent::clear_sendtime() {
  sendtime_ = 0;
  clear_has_sendtime();
}
 ::google::protobuf::int32 MsgConent::sendtime() const {
  // @@protoc_insertion_point(field_get:protobuf.MsgConent.sendtime)
  return sendtime_;
}
 void MsgConent::set_sendtime(::google::protobuf::int32 value) {
  set_has_sendtime();
  sendtime_ = value;
  // @@protoc_insertion_point(field_set:protobuf.MsgConent.sendtime)
}

// optional string conent = 5;
bool MsgConent::has_conent() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void MsgConent::set_has_conent() {
  _has_bits_[0] |= 0x00000010u;
}
void MsgConent::clear_has_conent() {
  _has_bits_[0] &= ~0x00000010u;
}
void MsgConent::clear_conent() {
  conent_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_conent();
}
 const ::std::string& MsgConent::conent() const {
  // @@protoc_insertion_point(field_get:protobuf.MsgConent.conent)
  return conent_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void MsgConent::set_conent(const ::std::string& value) {
  set_has_conent();
  conent_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:protobuf.MsgConent.conent)
}
 void MsgConent::set_conent(const char* value) {
  set_has_conent();
  conent_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:protobuf.MsgConent.conent)
}
 void MsgConent::set_conent(const char* value, size_t size) {
  set_has_conent();
  conent_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:protobuf.MsgConent.conent)
}
 ::std::string* MsgConent::mutable_conent() {
  set_has_conent();
  // @@protoc_insertion_point(field_mutable:protobuf.MsgConent.conent)
  return conent_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* MsgConent::release_conent() {
  // @@protoc_insertion_point(field_release:protobuf.MsgConent.conent)
  clear_has_conent();
  return conent_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void MsgConent::set_allocated_conent(::std::string* conent) {
  if (conent != NULL) {
    set_has_conent();
  } else {
    clear_has_conent();
  }
  conent_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), conent);
  // @@protoc_insertion_point(field_set_allocated:protobuf.MsgConent.conent)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MsgMark::kOpentimeFieldNumber;
const int MsgMark::kLasttimeFieldNumber;
const int MsgMark::kReaduidsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MsgMark::MsgMark()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:protobuf.MsgMark)
}

void MsgMark::InitAsDefaultInstance() {
}

MsgMark::MsgMark(const MsgMark& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:protobuf.MsgMark)
}

void MsgMark::SharedCtor() {
  _cached_size_ = 0;
  opentime_ = 0;
  lasttime_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgMark::~MsgMark() {
  // @@protoc_insertion_point(destructor:protobuf.MsgMark)
  SharedDtor();
}

void MsgMark::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MsgMark::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgMark::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgMark_descriptor_;
}

const MsgMark& MsgMark::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_chatmsg_2eproto();
  return *default_instance_;
}

MsgMark* MsgMark::default_instance_ = NULL;

MsgMark* MsgMark::New(::google::protobuf::Arena* arena) const {
  MsgMark* n = new MsgMark;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void MsgMark::Clear() {
// @@protoc_insertion_point(message_clear_start:protobuf.MsgMark)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(MsgMark, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<MsgMark*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(opentime_, lasttime_);

#undef ZR_HELPER_
#undef ZR_

  readuids_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool MsgMark::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:protobuf.MsgMark)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 opentime = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &opentime_)));
          set_has_opentime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_lasttime;
        break;
      }

      // optional int32 lasttime = 2;
      case 2: {
        if (tag == 16) {
         parse_lasttime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &lasttime_)));
          set_has_lasttime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_readuids;
        break;
      }

      // repeated int64 readuids = 3;
      case 3: {
        if (tag == 24) {
         parse_readuids:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 1, 24, input, this->mutable_readuids())));
        } else if (tag == 26) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, this->mutable_readuids())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_readuids;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:protobuf.MsgMark)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:protobuf.MsgMark)
  return false;
#undef DO_
}

void MsgMark::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:protobuf.MsgMark)
  // optional int32 opentime = 1;
  if (has_opentime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->opentime(), output);
  }

  // optional int32 lasttime = 2;
  if (has_lasttime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->lasttime(), output);
  }

  // repeated int64 readuids = 3;
  for (int i = 0; i < this->readuids_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(
      3, this->readuids(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:protobuf.MsgMark)
}

::google::protobuf::uint8* MsgMark::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:protobuf.MsgMark)
  // optional int32 opentime = 1;
  if (has_opentime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->opentime(), target);
  }

  // optional int32 lasttime = 2;
  if (has_lasttime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->lasttime(), target);
  }

  // repeated int64 readuids = 3;
  for (int i = 0; i < this->readuids_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt64ToArray(3, this->readuids(i), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protobuf.MsgMark)
  return target;
}

int MsgMark::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:protobuf.MsgMark)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 3u) {
    // optional int32 opentime = 1;
    if (has_opentime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->opentime());
    }

    // optional int32 lasttime = 2;
    if (has_lasttime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->lasttime());
    }

  }
  // repeated int64 readuids = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->readuids_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int64Size(this->readuids(i));
    }
    total_size += 1 * this->readuids_size() + data_size;
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgMark::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:protobuf.MsgMark)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const MsgMark* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const MsgMark>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:protobuf.MsgMark)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:protobuf.MsgMark)
    MergeFrom(*source);
  }
}

void MsgMark::MergeFrom(const MsgMark& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protobuf.MsgMark)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  readuids_.MergeFrom(from.readuids_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_opentime()) {
      set_opentime(from.opentime());
    }
    if (from.has_lasttime()) {
      set_lasttime(from.lasttime());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void MsgMark::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:protobuf.MsgMark)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgMark::CopyFrom(const MsgMark& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protobuf.MsgMark)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgMark::IsInitialized() const {

  return true;
}

void MsgMark::Swap(MsgMark* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MsgMark::InternalSwap(MsgMark* other) {
  std::swap(opentime_, other->opentime_);
  std::swap(lasttime_, other->lasttime_);
  readuids_.UnsafeArenaSwap(&other->readuids_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata MsgMark::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgMark_descriptor_;
  metadata.reflection = MsgMark_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// MsgMark

// optional int32 opentime = 1;
bool MsgMark::has_opentime() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void MsgMark::set_has_opentime() {
  _has_bits_[0] |= 0x00000001u;
}
void MsgMark::clear_has_opentime() {
  _has_bits_[0] &= ~0x00000001u;
}
void MsgMark::clear_opentime() {
  opentime_ = 0;
  clear_has_opentime();
}
 ::google::protobuf::int32 MsgMark::opentime() const {
  // @@protoc_insertion_point(field_get:protobuf.MsgMark.opentime)
  return opentime_;
}
 void MsgMark::set_opentime(::google::protobuf::int32 value) {
  set_has_opentime();
  opentime_ = value;
  // @@protoc_insertion_point(field_set:protobuf.MsgMark.opentime)
}

// optional int32 lasttime = 2;
bool MsgMark::has_lasttime() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void MsgMark::set_has_lasttime() {
  _has_bits_[0] |= 0x00000002u;
}
void MsgMark::clear_has_lasttime() {
  _has_bits_[0] &= ~0x00000002u;
}
void MsgMark::clear_lasttime() {
  lasttime_ = 0;
  clear_has_lasttime();
}
 ::google::protobuf::int32 MsgMark::lasttime() const {
  // @@protoc_insertion_point(field_get:protobuf.MsgMark.lasttime)
  return lasttime_;
}
 void MsgMark::set_lasttime(::google::protobuf::int32 value) {
  set_has_lasttime();
  lasttime_ = value;
  // @@protoc_insertion_point(field_set:protobuf.MsgMark.lasttime)
}

// repeated int64 readuids = 3;
int MsgMark::readuids_size() const {
  return readuids_.size();
}
void MsgMark::clear_readuids() {
  readuids_.Clear();
}
 ::google::protobuf::int64 MsgMark::readuids(int index) const {
  // @@protoc_insertion_point(field_get:protobuf.MsgMark.readuids)
  return readuids_.Get(index);
}
 void MsgMark::set_readuids(int index, ::google::protobuf::int64 value) {
  readuids_.Set(index, value);
  // @@protoc_insertion_point(field_set:protobuf.MsgMark.readuids)
}
 void MsgMark::add_readuids(::google::protobuf::int64 value) {
  readuids_.Add(value);
  // @@protoc_insertion_point(field_add:protobuf.MsgMark.readuids)
}
 const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
MsgMark::readuids() const {
  // @@protoc_insertion_point(field_list:protobuf.MsgMark.readuids)
  return readuids_;
}
 ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
MsgMark::mutable_readuids() {
  // @@protoc_insertion_point(field_mutable_list:protobuf.MsgMark.readuids)
  return &readuids_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ChatMsgBinary::kConentFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ChatMsgBinary::ChatMsgBinary()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:protobuf.ChatMsgBinary)
}

void ChatMsgBinary::InitAsDefaultInstance() {
  conent_ = const_cast< ::protobuf::MsgConent*>(&::protobuf::MsgConent::default_instance());
}

ChatMsgBinary::ChatMsgBinary(const ChatMsgBinary& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:protobuf.ChatMsgBinary)
}

void ChatMsgBinary::SharedCtor() {
  _cached_size_ = 0;
  conent_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ChatMsgBinary::~ChatMsgBinary() {
  // @@protoc_insertion_point(destructor:protobuf.ChatMsgBinary)
  SharedDtor();
}

void ChatMsgBinary::SharedDtor() {
  if (this != default_instance_) {
    delete conent_;
  }
}

void ChatMsgBinary::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ChatMsgBinary::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ChatMsgBinary_descriptor_;
}

const ChatMsgBinary& ChatMsgBinary::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_chatmsg_2eproto();
  return *default_instance_;
}

ChatMsgBinary* ChatMsgBinary::default_instance_ = NULL;

ChatMsgBinary* ChatMsgBinary::New(::google::protobuf::Arena* arena) const {
  ChatMsgBinary* n = new ChatMsgBinary;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ChatMsgBinary::Clear() {
// @@protoc_insertion_point(message_clear_start:protobuf.ChatMsgBinary)
  if (has_conent()) {
    if (conent_ != NULL) conent_->::protobuf::MsgConent::Clear();
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool ChatMsgBinary::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:protobuf.ChatMsgBinary)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .protobuf.MsgConent conent = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_conent()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:protobuf.ChatMsgBinary)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:protobuf.ChatMsgBinary)
  return false;
#undef DO_
}

void ChatMsgBinary::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:protobuf.ChatMsgBinary)
  // optional .protobuf.MsgConent conent = 1;
  if (has_conent()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->conent_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:protobuf.ChatMsgBinary)
}

::google::protobuf::uint8* ChatMsgBinary::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:protobuf.ChatMsgBinary)
  // optional .protobuf.MsgConent conent = 1;
  if (has_conent()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->conent_, false, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protobuf.ChatMsgBinary)
  return target;
}

int ChatMsgBinary::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:protobuf.ChatMsgBinary)
  int total_size = 0;

  // optional .protobuf.MsgConent conent = 1;
  if (has_conent()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->conent_);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ChatMsgBinary::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:protobuf.ChatMsgBinary)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const ChatMsgBinary* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const ChatMsgBinary>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:protobuf.ChatMsgBinary)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:protobuf.ChatMsgBinary)
    MergeFrom(*source);
  }
}

void ChatMsgBinary::MergeFrom(const ChatMsgBinary& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protobuf.ChatMsgBinary)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_conent()) {
      mutable_conent()->::protobuf::MsgConent::MergeFrom(from.conent());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void ChatMsgBinary::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:protobuf.ChatMsgBinary)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ChatMsgBinary::CopyFrom(const ChatMsgBinary& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protobuf.ChatMsgBinary)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChatMsgBinary::IsInitialized() const {

  return true;
}

void ChatMsgBinary::Swap(ChatMsgBinary* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ChatMsgBinary::InternalSwap(ChatMsgBinary* other) {
  std::swap(conent_, other->conent_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ChatMsgBinary::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ChatMsgBinary_descriptor_;
  metadata.reflection = ChatMsgBinary_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ChatMsgBinary

// optional .protobuf.MsgConent conent = 1;
bool ChatMsgBinary::has_conent() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void ChatMsgBinary::set_has_conent() {
  _has_bits_[0] |= 0x00000001u;
}
void ChatMsgBinary::clear_has_conent() {
  _has_bits_[0] &= ~0x00000001u;
}
void ChatMsgBinary::clear_conent() {
  if (conent_ != NULL) conent_->::protobuf::MsgConent::Clear();
  clear_has_conent();
}
const ::protobuf::MsgConent& ChatMsgBinary::conent() const {
  // @@protoc_insertion_point(field_get:protobuf.ChatMsgBinary.conent)
  return conent_ != NULL ? *conent_ : *default_instance_->conent_;
}
::protobuf::MsgConent* ChatMsgBinary::mutable_conent() {
  set_has_conent();
  if (conent_ == NULL) {
    conent_ = new ::protobuf::MsgConent;
  }
  // @@protoc_insertion_point(field_mutable:protobuf.ChatMsgBinary.conent)
  return conent_;
}
::protobuf::MsgConent* ChatMsgBinary::release_conent() {
  // @@protoc_insertion_point(field_release:protobuf.ChatMsgBinary.conent)
  clear_has_conent();
  ::protobuf::MsgConent* temp = conent_;
  conent_ = NULL;
  return temp;
}
void ChatMsgBinary::set_allocated_conent(::protobuf::MsgConent* conent) {
  delete conent_;
  conent_ = conent;
  if (conent) {
    set_has_conent();
  } else {
    clear_has_conent();
  }
  // @@protoc_insertion_point(field_set_allocated:protobuf.ChatMsgBinary.conent)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace protobuf

// @@protoc_insertion_point(global_scope)
